#!/bin/bash
#
# Usage:
#
# $ cd dir_with_updated_d6
# $ d6-release
#
# This script assumes that ORIGIN points to pantheon-systems/drops-6
# and the current branch is a PR with a new version.
#
SELF_DIRNAME="`dirname -- "$0"`"

set -ex

# Get the current branch
branch=$(git rev-parse --abbrev-ref HEAD)

# Fail if we are on the master branch
if [ "$branch" == "master" ]
then
  echo "Current branch is master. Run this script from a branch that contains a new version that has not been tagged yet."
  exit 1
fi

# Check the version of the current branch
version=$(drush status 'Drupal version' | sed -e 's/[^:]*: *//')

# Only release stable versions
set +e
non_stable=$(echo $version | grep -v '^v*[0-9.]*$')
set -e
if [ -n "$non_stable" ] ; then
  echo "Current version is $version; this script can only be used to releasese stable versions"
  echo 1
fi

# Check to see if there's already a tag for the current version
set +e
version_tag=$(git tag -l | grep "^$version\$")
set -e
if [ -n "$version_tag" ] ; then
  echo "Current release already tagged; nothing to do."
  exit 0
fi

# Delete all of the non-semver tags from the local repository to
# avoid conflicts when pushing
set +e
non_semver=$(git tag -l | grep -v '^v*[0-9.]*$')
set -e
for tag in $non_semver ; do
  git tag -d $tag
done

# Tag and merge the new release
git checkout master
git merge $branch
commit_message="$(git log --pretty=format:%s -1)"
commit_author="$(git log --pretty=format:%an -1)"
if [[ "$commit_author" != "Pantheon Automation" ]] ; then
  git commit --amend --author="Pantheon Automation <bot@getpantheon.com>"
fi

# Add a note to the documentation changelog
$SELF_DIRNAME/update_changelog --name=Drupal --project=pantheon-systems/drops-6 --version="$version" --message="$commit_message"

git tag $version
git push origin master
git push origin $version
