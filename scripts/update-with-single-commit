#!/usr/bin/env php
<?php

// n.b. This script is currently drops-8 specific

$home = getenv("HOME");
$project_dir_to_update = getcwd();
$token_cache="$home/.config/pantheon-upstream/github-token";

print("home is $home\n");
print("project to update is $project_dir_to_update\n");

function do_passthru($command) {
  print "\n#################################\n# $command\n";
  passthru($command);
  print "#################################\n\n";
}

function do_exec($command, &$output, &$status) {
  print "\n#################################\n# $command\n";
  $result = exec($command, $output, $status);
  print "#################################\n\n";
  return $result;
}

//
// usage:
//
//   cd drops-8
//   update-with-single-commit --release-node https://www.drupal.org/node/123456789
//
// Get parsed command line options.
//
//  -d                                                      Debug mode
//
//  -v                                                      Verbose mode
//
//  --upstream git://git.drupal.org/project/drupal.git      Where to find updated releases
//
//  --mergerepo git@github.com:pantheon-systems/drupal.git  Where to combine the Pantheon modifications before squashing
//
//  --project-cache /path                                   Where to clone repositories
//
//  --release 8.0.6                                         Which release to take (default is next available)
//
//  --release-node https://www.drupal.org/node/2578775
//
//  --beta | --pre-release                                  Allow alpha/beta/rc versions
//
$options = getopt ("dv", array(
  'dev',
  'future-dev',
  'beta',
  'pre-release',
  'composer',
  'upstream:',
  'project-cache:',
  'version-major:',
  'upstream-branch:',
  'local-branch:',
  'release-node:',
  'update-base:',
  'merge-label:',
  'release:',
  'main-branch:',
)) + array(
  'upstream' => "git://git.drupal.org/project/drupal.git",
  'mergerepo' => "git@github.com:pantheon-systems/drupal.git",
  'project-cache' => $home . "/local/upstreams",
  'version-major' => 8,
  'release-node' => '',
  'update-base' => 'update-base',
  'merge-label' => 'shipit',
  'release' => '',
  'main-branch' => 'master',
);

$options += array(
  'upstream-branch' => 'drupal-' . $options['version-major'],
  'upstream-base' => 'drupal-' . $options['version-major'] . '-base',
  'update-project' => 'drops-' . $options['version-major'],
);

$BOT_NAME = "Pantheon Automation";
$BOT_EMAIL = "bot@getpantheon.com";
$BOT_IDENTIFIER = "$BOT_NAME <$BOT_EMAIL>";

// var_export($options);

$dev = array_key_exists('dev', $options) || array_key_exists('future-dev', $options);
$pre_release = $options['pre-release'];
$fix_composer = array_key_exists('composer', $options) ? $options['composer'] : null;
$upstream_url = $options['upstream'];
$mergerepo_url = $options['mergerepo'];
$project_cache = $options['project-cache'];
$version_major = $options['version-major'];
$upstream_branch = $options['upstream-branch'];
$update_project = $options['update-project'];
$upstream_base = $options['upstream-base'];
$release_node = $options['release-node'];
$update_base = $options['update-base'];
$merge_label = $options['merge-label'];
$user_selected_release = $options['release'];
$main_branch = $options['main-branch'];
$allow_beta = array_key_exists('beta', $options) || array_key_exists('pre-release', $options);

$upstream_org = 'drupal-org'; // TODO: get from $upstream_url
$upstream_short_name = basename($upstream_url, ".git");
$upstream_name = $upstream_org . '-' . $upstream_short_name;
$mergerepo_org = 'pantheon-systems'; // TODO: get from $mergerepo_url
$mergerepo_name = $mergerepo_org . '-' . basename($mergerepo_url, ".git");
$upstream_path = $project_cache . '/' . $upstream_name;
$mergerepo_path = $project_cache . '/' . $mergerepo_name;

// TODO: build from the $mergerepo_url
$mergerepo_upstream_remote = "drupal-org";

do_exec("git config --get remote.origin.url", $remoteurl_output, $status);
$repo_url=$remoteurl_output[0];

print("Remote URL is $repo_url\n");


$cmd = "git rev-parse --abbrev-ref HEAD";
do_exec($cmd, $current_branch_output, $status);
$working_branch = $current_branch_output[0];

print("current branch is $working_branch\n");

// Read the github token from the token_cache if it exists.
// Otherwise fall back to the GITHUB_TOKEN environment variable.
if (file_exists($token_cache)) {
  $token = file_get_contents($token_cache);
  putenv("GITHUB_TOKEN=$token");
}
else {
  $token = getenv('GITHUB_TOKEN');
}
print "github token is $token\n";

$excludeBeta = '';
if (!$allow_beta) {
  $excludeBeta = " | grep -v '\\-[a-z]\\+[0-9]*\$'";
}
// Find the most recent version.
$cmd = "git ls-remote --tags \"$upstream_url\" | sed -e 's|refs/tags/||' | cut -f2 | grep '^$version_major\\.[0-9]' | grep -v '}\$' $excludeBeta";
do_exec($cmd, $tags_output, $status);
usort($tags_output, 'version_compare');

if (!empty($user_selected_release)) {
  $available_version = $user_selected_release;
  if (!in_array($available_version, $tags_output)) {
    print "Could not find an available tag for $available_version\n\n";
    exit(1);
  }
  print "\nSelected release $available_verion\n";

  $latest_version = array_pop($tags_output);
  if ($latest_version != $available_verion) {
    print "Note that a newer release, $latest_version, is also available.\n";
  }
  print "\n";
}
else {
  $available_version = array_pop($tags_output);
  $previous_version = array_pop($tags_output);

  if (empty($available_version)) {
    print "Could not find any available versions.\n";
    exit(1);
  }

  print "\nThe next available version is $available_version\n\n";
}


$dev_version = preg_replace('/-[a-z0-9]*$/', '', $available_version);
$dev_version = preg_replace('/[0-9]+$/', 'x', $dev_version);

if (array_key_exists('future-dev', $options)) {
  $version_parts = explode('.', $available_version);
  $dev_version = $version_parts[0] . '.' . ($version_parts[1] + 1) . '.x';
  $available_version = $version_parts[0] . '.' . ($version_parts[1] + 1) . '.0';
}

print "\nThe dev version is $dev_version\n";

$expected_version = $available_version;
if ($dev) {
  $version_parts = explode('.', $available_version);
  $expected_version_delta = array_key_exists('future-dev', $options) ? 0 : 1;
  $expected_version = $version_parts[0] . '.' . $version_parts[1] . '.' . ($version_parts[2] + $expected_version_delta) . '-dev';
  $commit_message = "Update to " . ucfirst($upstream_short_name) . " $dev_version.";
  $available_version = $dev_version;
  $available_version_label = $expected_version . "-" . date("Y-m-d");
}
else {
  $available_version_label = $available_version;
}

print "expected version is $expected_version";

$commit_message = "Update to " . ucfirst($upstream_short_name) . " $available_version_label.";
if (!$release_node && !$dev) {
  // Confirm that we can find an appropriate release node.  This is not
  // great; the pattern it is looking for is too specific, so we won't find
  // anything if the release node URL format changes.
  $cmd = "curl https://www.drupal.org/project/drupal 2>/dev/null | grep '\"https://www.drupal.org/project/drupal/releases/{$version_major}[0-9.]*\"' | sed 's|.*\(https://www.drupal.org/project/drupal/releases/[0-9.a-zA-Z-]*\).*|\\1|g' | sort -r | head -n 1";
  do_exec($cmd, $release_node_output, $status);
  if (!empty($release_node_output) && ($status == 0)) {
    $release_node = $release_node_output[0];
  }
}
if ($release_node) {
  $commit_message .= " For more information, see $release_node";
}

print "\nThe commit comment is:\n$commit_message\n";

// Make sure we are up to date in the repository we are updating (drops-N)
do_passthru("git checkout $main_branch");
do_passthru("git pull origin $main_branch");

$checkTagOutput = '';
$checkTagStatus = 0;
do_exec("git tag -l $available_version", $checkTagOutput, $checkTagStatus);

if (!empty($checkTagOutput) && !$dev) {
  print "Already updated to $available_version - nothing to do.\n";
  exit(10);
}



print "----------------------------------------------------------------------------------\n";
print "Check to see if new tag has changes to scaffold files; we will pre-tag drops-8-scaffolding if not.\n";

do_passthru(__DIR__ . '/pre-tag-drops-8-scaffolding');


print "----------------------------------------------------------------------------------\n";
print "About to update to $available_version\n";

$drops8_work_dir = do_exec("mktemp -d $project_cache/update-drops8-tmp.XXX", $unused_output, $unused_status);
$drops8TargetPath = "$drops8_work_dir/drops-8";

print "Work dir is: $drops8_work_dir\n";

// STEP 1: Clone the desired version of Drupal from the source git repository
// and then get rid of the .git directory

do_passthru("git clone -q --depth 1 --branch $available_version $upstream_url $drops8TargetPath");
do_passthru("rm -rf $drops8TargetPath/.git");
do_passthru("composer --working-dir=$drops8TargetPath -q install --prefer-dist --no-dev --optimize-autoloader");

// STEP 2:  Confirm that the Drupal verison looks okay

$cmd = "drush --root=$drops8TargetPath status 'Drupal version' --format=list";
do_exec($cmd, $drupal_version_output, $status);
$drupal_version_output = array_pop($drupal_version_output);
if ($drupal_version_output != $expected_version) {
  print("\n\nERROR. Tried to download $expected_version, but we have version $drupal_version_output at $drops8TargetPath\n");
  exit(1);
}

// STEP 3: Create a branch to merge any PRs labeled 'shipit'

$pr_merge_branch = "merge-pr-$available_version_label";
do_passthru("git checkout -B $pr_merge_branch");

$merge_labeled_prs = __DIR__ . '/merge-labeled-prs';
do_passthru("$merge_labeled_prs");

// STEP 4: Overlay Pantheon customizations on top of fresh Drupal download

// Entire files to take from drops-8:
// (TODO: move these to a separate repository)
$filesToCopy = [
  '.drush-lock-update',
  '.gitignore',
  'drush/example.drushrc.php',
  'sites/default/config/.htaccess',
  'sites/default/config/README.txt',
  'sites/default/default.services.pantheon.preproduction.yml',
  'sites/default/settings.pantheon.php',
  'sites/default/settings.php',
];

foreach ($filesToCopy as $file) {
  if (!file_exists($file)) {
    print "Required file $file not found!";
    exit(1);
  }
  $contents = file_get_contents($file);
  $parent = dirname("$drops8TargetPath/$file");
  if (!is_dir($parent)) {
    passthru("mkdir -p $parent >/dev/null 2>&1");
  }
  file_put_contents("$drops8TargetPath/$file", $contents);
}

// Things to adjust:

$defaultSettingsAddition = <<<EOT
 * Include the Pantheon-specific settings file.
 *
 * n.b. The settings.pantheon.php file makes some changes
 *      that affect all envrionments that this site
 *      exists in.  Always include this file, even in
 *      a local development environment, to insure that
 *      the site settings remain consistent.
 */
if (file_exists(__DIR__ . '/settings.pantheon.php')) {
  include __DIR__ . "/settings.pantheon.php";
}

/**
EOT;

$replacementSpot = " * Load local development override configuration, if available.";

$settingsContents = file_get_contents("sites/default/default.settings.php");
if (strstr($settingsContents, $replacementSpot) === false) {
  print "default.settings.php no longer contains: $replacementSpot\n";
  exit(1);
}
str_replace($replacementSpot, "$defaultSettingsAddition$replacementSpot", $settingsContents);
file_put_contents("$drops8TargetPath/sites/default/default.settings.php", $settingsContents);

$pantheonUpstreamContents = <<<EOT
# IMPORTANT NOTE:
# Do not edit this file unless you are doing so in your custom upstream repository.
# Override the defaults specified here in a site-specific `pantheon.yml` file.
# For more information see: https://pantheon.io/docs/pantheon-upstream-yml
api_version: 1
php_version: 7.0
EOT;

file_put_contents("$drops8TargetPath/pantheon.upstream.yml", $pantheonUpstreamContents);

// STEP 5: Get rid of the branch with the merged PRs

do_passthru("git checkout $main_branch");
do_passthru("git branch -D $pr_merge_branch");

// STEP 6: Create a branch for the update
// Create branch in drops-8 source repo, clone .git directory to work project, then check out master again.
// This effectively makes a new working git repo just like the local one in the remote location, but with
// all files in the target already in their desired state. Git will figure out the diffs.

do_passthru("git checkout -B update-$available_version_label");
do_passthru("rsync -raqz .git $drops8TargetPath");
do_passthru("git checkout $main_branch");

// STEP 7: Add a single commit to the branch

do_passthru("git -C $drops8TargetPath add -A --force . >/dev/null 2>&1");
do_passthru("git -C $drops8TargetPath commit -q --no-edit --author='$BOT_IDENTIFIER' -m '$commit_message'");

// n.b. if we do this, it makes the scaffold files available to Composer prior to the release of this version on Pantheon.
// do_passthru("git tag $available_version_label -m '$commit_message'");

print "Drops-8 updated at $drops8TargetPath";

print "----------------------------------------------------------------------------------\n";
print "Check to see if we can pre-tag scaffold files (if there have been no changes)\n";

# TODO: If HEAD has no changes to the scaffold files, then pre-tag the drops-8-scaffolding
# project with $available_version

$scaffold_project = $update_project . "-scaffolding";

print "----------------------------------------------------------------------------------\n";


// STEP 8: Check the Drupal version again -- just to make sure we didn't break anything with our edits

$cmd = "drush --root=$drops8TargetPath status 'Drupal version' --format=list";
do_exec($cmd, $drupal_version_output, $status);
if ($status != 0) {
  print("\n\nERROR. Trying to add drops-8 content to Drupal $expected_version broke 'drush status' on the site.\n");
  exit(1);
}
$drupal_version_output = array_pop($drupal_version_output);
if ($drupal_version_output != $expected_version) {
  print("\n\nERROR. Trying to add drops-8 content to Drupal $expected_version, but Drush is reporting version $drupal_version_output.\n");
  exit(1);
}

// STEP 9: Create a PR

$PR_message_file = tempnam(sys_get_temp_dir(), "{$update_project}-PR-{$available_version_label}");
$PR_message_text = <<<EOT
Update {$update_project} to {$available_version_label}

Inspect the result of the [functional tests run by Circle CI](https://circleci.com/gh/pantheon-systems/drops-8). These tests will create a [multidev environment in the ci-drops-8 test site](https://admin.dashboard.pantheon.io/sites/689219ca-6583-4af8-ab05-2cebf6ef79a0#multidev/dev-environments) that may be browsed after the tests complete.

**OPTIONAL** -- To create your own test site:

- Create a new Drupal 8 site on Pantheon.
- When site creation is finished, visit dashboard.
- Switch to "git" mode.
- Clone your site locally.
- Apply the files from this PR on top of your local checkout.
  - git remote add drops-8 git@github.com:pantheon-systems/drops-8.git
  - git fetch drops-8
  - git merge drops-8/update-$available_version_label
- Push your files back up to Pantheon.
- Switch back to sftp mode.
- Visit your site and step through the installation process.

EOT;
file_put_contents($PR_message_file, $PR_message_text);

do_passthru("git -C $drops8TargetPath push --tags origin update-$available_version_label");
do_passthru("hub -C $drops8TargetPath pull-request -F $PR_message_file");

unlink($PR_message_file);

print "\n\nDONE. Please look for the pull request on GitHub.\n";

exit(0);

// ----------------------------------------------------------------------
//
// T H E   O L D   W A Y
//
// ----------------------------------------------------------------------

// Clone the mergerepo if it does not already exist.
@mkdir($project_cache);
if (!is_dir($mergerepo_path)) {
  print("git clone $mergerepo_url $mergerepo_path\n");
  do_passthru("git clone $mergerepo_url $mergerepo_path");
}
chdir($mergerepo_path);

print("Merge repo path is $mergerepo_path\n");

// Bring the mergerepo up to date
do_passthru("git fetch origin");
do_passthru("git checkout $dev_version");
// Note that this does not exist yet if our last release was 8.1.x and we are doing 8.2.x
do_passthru("git pull origin $dev_version");

// Add a remote for the upstream if it's not already there.
// If it's there, assume it's correct, I guees.  :P
do_exec("git remote", $remote_output, $status);
if (strpos(implode("\n", $remote_output), $mergerepo_upstream_remote) === FALSE) {
  print("git remote add $mergerepo_upstream_remote $upstream_url\n");
  do_passthru("git remote add $mergerepo_upstream_remote $upstream_url");
}
else {
  print("The remote $mergerepo_upstream_remote already exists in $mergerepo_url\n");
}

// Next, make sure that our dev branch is up-to-date with the upstream
do_passthru("git pull $mergerepo_upstream_remote $dev_version -Xthiers");

// Switch to the "pantheon" dev branch; make sure that it and the "patheon" branch are up-to-date.
// TODO: If pantheon-$dev_version does not exist, then we should create it.
// We might want to find an appropriate base commit, and branch off of that
// rather than just branching off of the HEAD of the previous $dev_version branch.
do_passthru("git checkout pantheon-$dev_version");
do_passthru("git pull origin pantheon-$dev_version");
do_passthru("git pull origin pantheon");

/*
// no commits in common, cannot merge into the merge-repo like this
if ($merge_label) {
  // Merge in any PRs labeled 'shipit'
  do_passthru("git checkout pantheon");
  $merge_labeled_prs_script = __DIR__ . '/merge-labeled-prs';
  do_passthru("$merge_labeled_prs_script --repo-url '$repo_url' --label $merge_label -d -v");
}
*/

// Check to see if we already have a tag for the available version
do_exec("git tag -l", $mergerepo_tags, $status);
$mergerepo_up_to_date = (in_array($available_version, $mergerepo_tags) !== FALSE);

// Update the merge repo, if we need to.
if (!$mergerepo_up_to_date) {
  print("git pull $mergerepo_upstream_remote $available_version\n");
  // Update the pantheon dev branch to the latest version
  do_exec("git pull --no-edit $mergerepo_upstream_remote $available_version", $pull_update_version_output, $status);
  // Make sure that we have all of the commits from the 'pantheon' branch.
  do_passthru("git merge --no-edit origin/pantheon");
  // Change the commit message of the last commit.
  do_passthru("git commit --amend --no-edit --author='$BOT_IDENTIFIER' -m '$commit_message'");

  print("Tag and push updated release\ngit tag -a $available_version_label\ngit push --tags origin pantheon-$dev_version\n");
//  We should not tag the merge repo. The tags in the merge repo are the drupal.org tags.
//  do_passthru("git tag -a $available_version_label -m '$commit_message'");
//  do_passthru("git push --tags origin pantheon-$dev_version");

  print("Make a branch, update-$available_version_label\ngit checkout -B update-$available_version_label\ngit push origin update-$available_version_label\n");
  // Make a branch, too, so that we have a place to make a PR for testing
  do_passthru("git checkout -B update-$available_version_label");
//  do_passthru("git push origin update-$available_version_label");
}
else {
  print("The merge repo, $mergerepo_url, already contains tag $available_version\n");
}


// Next, we are going to do a squash-merge into the project we want to update.
$squash_work_dir = do_exec("mktemp -d $project_cache/update-squash-tmp.XXX", $unused_output, $unused_status);
$squash_path = $squash_work_dir . "/" . basename($mergerepo_path);

// Change back to the project to update, and make sure it is up-to-date
chdir($project_dir_to_update);
do_passthru("git checkout $main_branch");
do_exec("git pull origin $main_branch", $pull_origin_output, $status);

// Create a branch to do the squash-merge magic on
do_passthru("git checkout -B update-$available_version_label");

/*
// Add PRs labeled 'shipit' to our source repo
// TODO: These PRs must be also committed to the merge
// repo (e.g. pantheon-systems/drupal in the Pantheon branch)
if ($merge_label) {
  // Merge in any PRs labeled 'shipit'
  $merge_labeled_prs_script = __DIR__ . '/merge-labeled-prs';
  do_passthru("$merge_labeled_prs_script --repo-url '$repo_url' --label $merge_label -d -v");
}
*/

// Duplicate the files from the mergerepo, which we have prepared
// to be in the exact state we desire for the merge.
print("\nBegin magic.\n");
print("cp -R $mergerepo_path $squash_path\n");
do_passthru("cp -R $mergerepo_path $squash_path");

// Next, git rid of the .git directory in our duplicated repository,
// and replace it with the .git directory of our destination repository.
print("rm -rf $squash_path/.git\n");
do_passthru("rm -rf $squash_path/.git");
print("cp -R $project_dir_to_update/.git $squash_path\n");
do_passthru("cp -R $project_dir_to_update/.git $squash_path");

// BOOM. All the files are in exactly the state we want them to be in.
// When we add and commit them, git will figure out what the difference
// is, and will write an appropriate minimal commit for us.
chdir($squash_path);
do_passthru("git add -A .");
do_passthru("git commit  --no-edit --author='$BOT_IDENTIFIER' -m '$commit_message'");
do_passthru("git tag $available_version_label -m '$commit_message'");

if (!isset($fix_composer)) {
  $fix_composer = file_exists('composer.json');
}

// Update composer if we need to
if ($fix_composer) {
  do_passthru("git rm -rf vendor");
  do_passthru("composer install --no-dev");
  do_passthru("git add -f vendor");
  do_passthru("git commit --amend");
}

// Confirm that the Drupal verison looks okay
$cmd = "drush --root=$squash_path status 'Drupal version' --format=list";
do_exec($cmd, $drupal_version_output, $status);
$drupal_version_output = array_pop($drupal_version_output);
if ($drupal_version_output != $available_version) {
  print("\n\nERROR. Tried to update to $available_version, but we have version $drupal_version_output at $squash_path\n");
  exit(1);
}

print("\n\nEverything looks all right in $squash_path; tagging and creating a PR.\n");


// We used to ask the user to do this by hand. We'll go ahead and do it automatically now.
// print("If the project looks okay:\ncd $squash_path\ngit push --tags origin update-$available_version_label\n");

$PR_message_file = tempnam(sys_get_temp_dir(), "{$update_project}-PR-{$available_version_label}");
$PR_message_text = <<<EOT
Update {$update_project} to {$available_version_label}

To create your own test site:

- Create a new Drupal 8 site on Pantheon.
- When site creation is finished, visit dashboard.
- Switch to "git" mode.
- Clone your site locally.
- Apply the files from this PR on top of your local checkout.
  - git remote add drops-8 git@github.com:pantheon-systems/drops-8.git
  - git fetch drops-8
  - git merge drops-8/update-$available_version_label
- Push your files back up to Pantheon.
- Switch back to sftp mode.
- Visit your site and step through the installation process.

You may also inspect the result of the [functional tests run by Circle CI](https://circleci.com/gh/pantheon-systems/drops-8). These tests will create a [multidev environment in the ci-drops-8 test site](https://admin.dashboard.pantheon.io/sites/689219ca-6583-4af8-ab05-2cebf6ef79a0#multidev/dev-environments) that may be browsed after the tests complete.
EOT;
file_put_contents($PR_message_file, $PR_message_text);

do_passthru("git push --tags origin update-$available_version_label");
do_passthru("hub pull-request -b $main_branch -F $PR_message_file");

unlink($PR_message_file);

print "\n\nDONE. Please look for the pull request on GitHub.\n";

chdir($project_dir_to_update);

// Switch to the update branch
do_passthru("git checkout update-$available_version_label");
do_passthru("git pull origin update-$available_version_label");

