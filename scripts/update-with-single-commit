#!/usr/bin/env php
<?php

$home = getenv("HOME");
$project_dir_to_update = getcwd();

print("home is $home\n");
print("project to update is $project_dir_to_update\n");

function do_passthru($command) {
  print "\n#################################\n# $command\n";
  passthru($command);
  print "#################################\n\n";
}

function do_exec($command, &$output, &$status) {
  print "\n#################################\n# $command\n";
  $result = exec($command, $output, $status);
  print "#################################\n\n";
  return $result;
}

//
// usage:
//
//   cd drops-8
//   update-with-single-commit --release-node https://www.drupal.org/node/123456789
//
// Get parsed command line options.
//
//  -d                                                      Debug mode
//
//  -v                                                      Verbose mode
//
//  --upstream git://git.drupal.org/project/drupal.git      Where to find updated releases
//
//  --mergerepo git@github.com:pantheon-systems/drupal.git  Where to combine the Pantheon modifications before squashing
//
//  --project-cache /path                                   Where to clone repositories
//
//  --release 8.0.6                                         Which release to take (default is next available)
//
//  --release-node https://www.drupal.org/node/2578775
//
$options = getopt ("dv", array(
  'dev',
  'beta',
  'composer',
  'upstream:',
  'project-cache:',
  'version-major:',
  'upstream-branch:',
  'local-branch:',
  'release-node:',
  'update-base:',
  'merge-label:',
  'release:',
  'main-branch:',
)) + array(
  'upstream' => "git://git.drupal.org/project/drupal.git",
  'mergerepo' => "git@github.com:pantheon-systems/drupal.git",
  'project-cache' => $home . "/local/upstreams",
  'version-major' => 8,
  'release-node' => '',
  'update-base' => 'update-base',
  'merge-label' => 'shipit',
  'release' => '',
  'main-branch' => 'master',
);

$options += array(
  'upstream-branch' => 'drupal-' . $options['version-major'],
  'upstream-base' => 'drupal-' . $options['version-major'] . '-base',
  'update-branch' => 'drops-' . $options['version-major'],
);

$BOT_NAME = "Pantheon Automation";
$BOT_EMAIL = "bot@getpantheon.com";
$BOT_IDENTIFIER = "$BOT_NAME <$BOT_EMAIL>";

// var_export($options);

$dev = array_key_exists('dev', $options);
$fix_composer = array_key_exists('composer', $options) ? $options['composer'] : null;
$upstream_url = $options['upstream'];
$mergerepo_url = $options['mergerepo'];
$project_cache = $options['project-cache'];
$version_major = $options['version-major'];
$upstream_branch = $options['upstream-branch'];
$update_branch = $options['update-branch'];
$upstream_base = $options['upstream-base'];
$release_node = $options['release-node'];
$update_base = $options['update-base'];
$merge_label = $options['merge-label'];
$user_selected_release = $options['release'];
$main_branch = $options['main-branch'];
$allow_beta = array_key_exists('beta', $options);

$upstream_org = 'drupal-org'; // TODO: get from $upstream_url
$upstream_short_name = basename($upstream_url, ".git");
$upstream_name = $upstream_org . '-' . $upstream_short_name;
$mergerepo_org = 'pantheon-systems'; // TODO: get from $mergerepo_url
$mergerepo_name = $mergerepo_org . '-' . basename($mergerepo_url, ".git");
$upstream_path = $project_cache . '/' . $upstream_name;
$mergerepo_path = $project_cache . '/' . $mergerepo_name;

// TODO: build from the $mergerepo_url
$mergerepo_upstream_remote = "drupal-org";

do_exec("git config --get remote.origin.url", $remoteurl_output, $status);
$repo_url=$remoteurl_output[0];

print("Remote URL is $repo_url\n");


$cmd = "git rev-parse --abbrev-ref HEAD";
do_exec($cmd, $current_branch_output, $status);
$working_branch = $current_branch_output[0];

print("current branch is $working_branch\n");

$excludeBeta = '';
if (!$allow_beta) {
  $excludeBeta = " | grep -v '\\-[a-z]\\+[0-9]*\$'";
}
// Find the most recent version.
$cmd = "git ls-remote --tags \"$upstream_url\" | sed -e 's|refs/tags/||' | cut -f2 | grep '^$version_major\\.[0-9]\\+' | grep -v '}\$' $excludeBeta";
do_exec($cmd, $tags_output, $status);
usort($tags_output, 'version_compare');

if (!empty($user_selected_release)) {
  $available_version = $user_selected_release;
  if (!in_array($available_version, $tags_output)) {
    print "Could not find an available tag for $available_version\n\n";
    exit(1);
  }
  print "\nSelected release $available_verion\n";

  $latest_version = array_pop($tags_output);
  if ($latest_version != $available_verion) {
    print "Note that a newer release, $latest_version, is also available.\n";
  }
  print "\n";
}
else {
  $available_version = array_pop($tags_output);
  $previous_version = array_pop($tags_output);
  print "\nThe next available version is $available_version\n\n";
}

// TODO: There will be trouble if we skip a version. :P
// We should test to make sure that $previous_version exists
// in the commit comments of the update repository. If it
// does not, then pop off more versions until we find the
// last one we updated to.

//$previous_version = "8.0.0-beta12";
//$available_version = "8.0.0-beta15";


$dev_version = preg_replace('/-[a-z0-9]*$/', '', $available_version);
$dev_version = preg_replace('/[0-9]+$/', 'x', $dev_version);

print "\nThe dev version is $dev_version\n";

#
# TODO:
#
# Need to determine if we are doing a patch release (8.1.9 to 8.1.10)
# or a minor release (8.1.10 to 8.2.0). In the case of a minor release,
# we need to do the following:
#
# git fetch drupal-org
# git checkout -b 8.2.x drupal-org/8.2.x
# $mergeBase = git merge-base 8.2.x 8.1.x
# git checkout -b pantheon-8.2.x $mergeBase
# git merge 8.2.0
# git merge pantheon
#
# !!!!!! At this point you may have a merge conflict.  (Sad panda.)
# Fix manually, try again.



if ($dev) {
  $commit_message = "Update to " . ucfirst($upstream_short_name) . " $dev_version.";
  $available_version = $dev_version;
  $available_version_label = str_replace(".x", "-dev", $dev_version) . "-" . date("Y-m-d");
}
else {
  $available_version_label = $available_version;
}

$commit_message = "Update to " . ucfirst($upstream_short_name) . " $available_version_label.";
if (!$release_node) {
  // Confirm that we can find an appropriate release node.  This is not
  // great; the pattern it is looking for is too specific, so we won't find
  // anything if the release node URL format changes.
  $cmd = "curl https://www.drupal.org/project/drupal 2>/dev/null | grep '\"https://www.drupal.org/project/drupal/releases/{$version_major}[0-9.]*\"' | sed 's|.*\(https://www.drupal.org/project/drupal/releases/[0-9.a-zA-Z-]*\).*|\\1|g' | sort -r | head -n 1";
  do_exec($cmd, $release_node_output, $status);
  if (!empty($release_node_output) && ($status == 0)) {
    $release_node = $release_node_output[0];
  }
}
if ($release_node) {
  $commit_message .= " For more information, see $release_node";
}

print "\nThe commit comment is:\n$commit_message\n";

// Make sure we are up to date in the repository we are updating (drops-N)
do_passthru("git checkout $main_branch");
do_passthru("git pull origin $main_branch");


// Clone the mergerepo if it does not already exist.
@mkdir($project_cache);
if (!is_dir($mergerepo_path)) {
  print("git clone $mergerepo_url $mergerepo_path\n");
  do_passthru("git clone $mergerepo_url $mergerepo_path");
}
chdir($mergerepo_path);

print("Merge repo path is $mergerepo_path\n");

// Bring the mergerepo up to date
do_passthru("git fetch origin");
do_passthru("git checkout $dev_version");
// Note that this does not exist yet if our last release was 8.1.x and we are doing 8.2.x
do_passthru("git pull origin $dev_version");

// Add a remote for the upstream if it's not already there.
// If it's there, assume it's correct, I guees.  :P
do_exec("git remote", $remote_output, $status);
if (strpos(implode("\n", $remote_output), $mergerepo_upstream_remote) === FALSE) {
  print("git remote add $mergerepo_upstream_remote $upstream_url\n");
  do_passthru("git remote add $mergerepo_upstream_remote $upstream_url");
}
else {
  print("The remote $mergerepo_upstream_remote already exists in $mergerepo_url\n");
}

// Next, make sure that our dev branch is up-to-date with the upstream
do_passthru("git pull $mergerepo_upstream_remote $dev_version");

// Switch to the "pantheon" dev branch; make sure that it and the "patheon" branch are up-to-date.
// TODO: If pantheon-$dev_version does not exist, then we should create it.
// We might want to find an appropriate base commit, and branch off of that
// rather than just branching off of the HEAD of the previous $dev_version branch.
do_passthru("git checkout pantheon-$dev_version");
do_passthru("git pull origin pantheon-$dev_version");
do_passthru("git pull origin pantheon");

/*
// no commits in common, cannot merge into the merge-repo like this
if ($merge_label) {
  // Merge in any PRs labeled 'shipit'
  do_passthru("git checkout pantheon");
  $merge_labeled_prs_script = __DIR__ . '/merge-labeled-prs';
  do_passthru("$merge_labeled_prs_script --repo-url '$repo_url' --label $merge_label -d -v");
}
*/

// Check to see if we already have a tag for the available version
do_exec("git tag -l", $mergerepo_tags, $status);
$mergerepo_up_to_date = (in_array($available_version, $mergerepo_tags) !== FALSE);

// Update the merge repo, if we need to.
if (!$mergerepo_up_to_date) {
  print("git pull $mergerepo_upstream_remote $available_version\n");
  // Update the pantheon dev branch to the latest version
  do_exec("git pull --no-edit $mergerepo_upstream_remote $available_version", $pull_update_version_output, $status);
  // Make sure that we have all of the commits from the 'pantheon' branch.
  do_passthru("git merge --no-edit origin/pantheon");
  // Change the commit message of the last commit.
  do_passthru("git commit --amend --no-edit --author='$BOT_IDENTIFIER' -m '$commit_message'");

  print("Tag and push updated release\ngit tag -a $available_version_label\ngit push --tags origin pantheon-$dev_version\n");
//  We should not tag the merge repo. The tags in the merge repo are the drupal.org tags.
//  do_passthru("git tag -a $available_version_label -m '$commit_message'");
//  do_passthru("git push --tags origin pantheon-$dev_version");

  print("Make a branch, update-$available_version_label\ngit checkout -B update-$available_version_label\ngit push origin update-$available_version_label\n");
  // Make a branch, too, so that we have a place to make a PR for testing
  do_passthru("git checkout -B update-$available_version_label");
//  do_passthru("git push origin update-$available_version_label");
}
else {
  print("The merge repo, $mergerepo_url, already contains tag $available_version\n");
}


// Next, we are going to do a squash-merge into the project we want to update.
$squash_work_dir = do_exec("mktemp -d $project_cache/update-squash-tmp.XXX", $unused_output, $unused_status);
$squash_path = $squash_work_dir . "/" . basename($mergerepo_path);

// Change back to the project to update, and make sure it is up-to-date
chdir($project_dir_to_update);
do_passthru("git checkout $main_branch");
do_exec("git pull origin $main_branch", $pull_origin_output, $status);

// Create a branch to do the squash-merge magic on
do_passthru("git checkout -B update-$available_version_label");

// Add PRs labeled 'shipit' to our source repo
// TODO: These PRs must be also committed to the merge
// repo (e.g. pantheon-systems/drupal in the Pantheon branch)
if ($merge_label) {
  // Merge in any PRs labeled 'shipit'
  $merge_labeled_prs_script = __DIR__ . '/merge-labeled-prs';
  do_passthru("$merge_labeled_prs_script --repo-url '$repo_url' --label $merge_label -d -v");
}

// Duplicate the files from the mergerepo, which we have prepared
// to be in the exact state we desire for the merge.
print("\nBegin magic.\n");
print("cp -R $mergerepo_path $squash_path\n");
do_passthru("cp -R $mergerepo_path $squash_path");

// Next, git rid of the .git directory in our duplicated repository,
// and replace it with the .git directory of our destination repository.
print("rm -rf $squash_path/.git\n");
do_passthru("rm -rf $squash_path/.git");
print("cp -R $project_dir_to_update/.git $squash_path\n");
do_passthru("cp -R $project_dir_to_update/.git $squash_path");

// BOOM. All the files are in exactly the state we want them to be in.
// When we add and commit them, git will figure out what the difference
// is, and will write an appropriate minimal commit for us.
chdir($squash_path);
do_passthru("git add -A .");
do_passthru("git commit  --no-edit --author='$BOT_IDENTIFIER' -m '$commit_message'");
do_passthru("git tag $available_version_label -m '$commit_message'");

if (!isset($fix_composer)) {
  $fix_composer = file_exists('composer.json');
}

// Update composer if we need to
if ($fix_composer) {
  do_passthru("rm -rf vendor");
  do_passthru("composer install");
  do_passthru("git add -f vendor");
  do_passthru("git commit --amend");
}

// Confirm that the Drupal verison looks okay
$cmd = "drush --root=$squash_path status 'Drupal version' --format=list";
do_exec($cmd, $drupal_version_output, $status);
$drupal_version_output = array_pop($drupal_version_output);
if ($drupal_version_output != $available_version) {
  print("\n\nERROR. Tried to update to $available_version, but we have version $drupal_version_output at $squash_path\n");
  exit(1);
}

print("\n\nDONE.\n\nEverything should be all right in $squash_path\n");


// Maybe it's better to have folks do this by hand for a bit.
print("If the project looks okay:\ncd $squash_path\ngit push --tags origin update-$available_version_label\n");
// do_passthru("git push --tags origin update-$available_version_label");

chdir($project_dir_to_update);


