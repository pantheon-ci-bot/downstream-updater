#!/bin/bash

#set -x

# User to make commits as
BOT_NAME="Pantheon Automation";
BOT_EMAIL="bot@getpantheon.com";
BOT_IDENTIFIER="$BOT_NAME <$BOT_EMAIL>";

#BOT_NAME="Pantheon Upstream"
#BOT_EMAIL="developers+pantheon-upstream@getpantheon.com"

#
# Default option values
#
PR_CREATOR=pantheon-upstream
FORK_OWNER=
REPO=pantheon-systems/drops-7
UPSTREAM_URL=http://git.drupal.org/project/drupal.git
RELEASE_URL=https://www.drupal.org/project/drupal/releases
UPDATE_REPO=
TOOL_NAME="pantheon-systems/donwstream-updater"
MAINTAINER_EMAIL="greg+downstream-updater@pantheon.io"
VERSION_REQUIRED_PREFIX=
VERSION_MAJOR=
VERSION_PATTERN=
REPO_BASE_BRANCH=master
SCRIPTS_DIR=
TOKEN_CACHE="$HOME/.config/pantheon-upstream/github-token"
RELEASE_NODE=
FORCE_CLEANUP=false
MERGE_FLAGS=

debug=false
DO=
VERBOSE=false

#
# Return codes
#
ERROR_ALREADY_UP_TO_DATE=10

#
# Parse command line args
#
while [ $# -gt 0 ] ; do

  option="$1"
  shift

  case "$option" in
    -d|--debug)
      debug=true
      ;;

    -s|--simulate)
      DO=echo
      ;;

    -v|--verbose)
      VERBOSE=true
      ;;

    --d6)
      REPO=pantheon-systems/drops-6
      UPSTREAM_URL=https://github.com/pressflow/6.git
      RELEASE_URL=https://github.com/pressflow/6/releases/tag
      VERSION_REQUIRED_PREFIX=pressflow-
      VERSION_MAJOR=6
      ;;

    --force-cleanup)
      FORCE_CLEANUP=true
      ;;

    # --github-token TOKEN: specify the encoded token to use with the GitHub API.
    # See https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization
    --github-token)
      ENCODED_TOKEN="$1"
      shift
      ;;

    # --token-cache FILE: specify the file where the encoded token should be cached
    --token-cache)
      TOKEN_CACHE="$1"
      shift
      ;;

    # --pr-creator USER: specify the GitHub user that will create the PR.
    # This is only needed if no TOKEN is provided.  The user will have
    # to enter their password to create the token.
    --pr-creator)
      PR_CREATOR="$1"
      shift
      ;;

    # --fork-owner USER: specify the owner of the forked repository to work
    # with (in case the user cannot commit to REPO)
    --fork-owner)
      FORK_OWNER="$1"
      shift
      ;;

    # --repo REPO: specify which repository we are updating.
    # This must be on GitHub; the name should be organization/project.
    --repo)
      REPO="$1"
      shift
      ;;

    # --upstream REPO: specify the upstream repository URL we are updating against.
    # This does not need to be on GitHub; any clone URL will work.
    --upstream-url)
      UPSTREAM_URL="$1"
      shift
      ;;

    # --update REPO: specify an "update" repo that is used to test the
    # repository being updated. This must be on GitHub; the name should
    # be organization/project.
    --update)
      UPDATE_REPO="$1"
      shift
      ;;

    # The username to use in commit attributions for commits made by the bot
    --bot-name)
      BOT_NAME="$1"
      shift
      ;;

    # The email to use in commit attributions for commits made by the bot
    --bot-email)
      BOT_EMAIL="$1"
      shift
      ;;

    # The tool name to be used in the User Agent used in GitHub curl requests
    --tool-name)
      TOOL_NAME="$1"
      shift
      ;;

    # The email address to be used in the User Agent used in GitHub curl requests
    --maintainer-email)
      MAINTAINER_EMAIL="$1"
      shift
      ;;

    # The major version of Drupal (or eventually WordPress?) to update
    --version-major)
      VERSION_MAJOR="$1"
      shift
      ;;

    # The "version pattern" is the invariant part of the version that comes
    # after the major version, e.g. "0.0-beta" for Drupal 8.
    --version-pattern)
      VERSION_PATTERN="$1"
      shift
      ;;

    # The "version prefix" is the required part of the version that comes
    # before the actual version string, e.g. "pressflow-" for Pressflow.
    --version-prefix)
      VERSION_REQUIRED_PREFIX="$1"
      shift
      ;;

    # Add --force-merge only if there are merge conflicts, and you have
    # reviewed them and determined that it is appropriate to just take THEIRS
    # for all of them.
    --force-merge)
      MERGE_FLAGS=-Xtheirs
      ;;

    # --base master: the branch to start from
    --base)
      REPO_BASE_BRANCH="$1"
      shift
      ;;

    # --scripts-dir: the location to find our scripts
    --scripts-dir)
      SCRIPTS_DIR="$1"
      shift
      ;;

    -*)
      echo "Unknown option $option"
      exit 1;
      ;;

    *)
      echo "Parameters are not used; '$option' is invalid."
      exit 1;
      ;;
  esac
done

# Set the scripts dir if it was not explicitly given to us
if [ -z "$SCRIPTS_DIR" ]
then
  SELF_DIRNAME="`dirname -- "$0"`"
  SCRIPTS_DIR="`cd -P -- "$SELF_DIRNAME/../scripts" && pwd -P`"
fi

# Given REPO in the form "pantheon-systems/drops-7", set:
#   REPO_URL: "git@github.com:pantheon-systems/drops-7"
#   REPO_OWNER: "pantheon-systems"
#   REPO_SHORT_NAME: "drops-7"
REPO_URL=git@github.com:${REPO}.git
REPO_OWNER=$(echo $REPO | sed -e 's#/[^/]*##')
REPO_SHORT_NAME=$(echo $REPO | sed -e 's#[^/]*/##')

# Given UPSTREAM_URL in the form "git@github.com:pressflow/7.git"
# or http://git.drupal.org/project/drupal.git, set:
#   UPSTREAM: pressflow/7
#   UPSTREAM_OWNER: pressflow
#   UPSTREAM_SHORT_NAME: 7
UPSTREAM=$(echo "$UPSTREAM_URL" | sed -e 's#git.drupal.org/project#git.drupal.org/drupal#' -e 's#\([^/]*/[^/]*\).git$#%%%\1#' -e 's/.*%%%//')
UPSTREAM_OWNER=$(echo $UPSTREAM | sed -e 's#/[^/]*##')
UPSTREAM_SHORT_NAME=$(echo $UPSTREAM | sed -e 's#[^/]*/##')

# If the user did not specify the url for the "updates"
# URL, then replace 'drops' with 'updates', and use that.
# TODO: Need to add a pattern for WordPress, once we support that.
if [ -z "$UPDATE_REPO" ]
then
  # TODO:
  #   UPDATE_REPO="${REPO/drops/updates}"
  # For now, only do this for drops-7.
  UPDATE_REPO="${REPO/drops-7/updates-7}"
  # If none of the patterns match, then the update repo URL will
  # be unchanged, and that would not be right.  Clear it, so the
  # updates step is skipped.
  if [ "$REPO" == "$UPDATE_REPO" ]
  then
    UPDATE_REPO=
  fi
fi

# If UPDATE_REPO is set, then also set related variables
if [ -n "$UPDATE_REPO" ]
then
  UPDATE_REPO_URL=git@github.com:${UPDATE_REPO}.git
  UPDATE_REPO_OWNER=$(echo $UPDATE_REPO | sed -e 's#/[^/]*##')
  UPDATE_REPO_SHORT_NAME=$(echo $UPDATE_REPO | sed -e 's#[^/]*/##')
fi

# If no fork owner was specified, then we will work directly
# from the main repository
if [ -z "$FORK_OWNER" ]
then
  FORK_OWNER="$REPO_OWNER"
fi

# The forked repo to clone.  This might be the same as REPO
FORKED_REPO_URL=git@github.com:${FORK_OWNER}/${REPO_SHORT_NAME}.git
FORKED_REPO=${FORK_OWNER}/${REPO_SHORT_NAME}

# Make a User-Agent string from the tool name and maintainer email address
UA="pantheon-systems/updater <greg+updater@pantheon.io>"

# If the user did not specify the --version-major,
# then take the last character from the $REPO
if [ -z "$VERSION_MAJOR" ]
then
  VERSION_MAJOR="${REPO:$((${#REPO}-1))}"
fi

# Set a default version pattern for Drupal 8.
# This will need to be updated once d8 advances to
# a later phase (e.g. rc1).
if [ -z "$VERSION_PATTERN" ] && [ "$VERSION_MAJOR" == "8" ]
then
  VERSION_PATTERN="0.0-beta"
fi

# Set up a tmp directory to work in
TEMP_WORK=$(mktemp -d /tmp/update-script.XXX)

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#   B A S H   F U N C T I O N S
#
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

source "$SCRIPTS_DIR/utils.bash"
source "$SCRIPTS_DIR/git.bash"
source "$SCRIPTS_DIR/github.bash"

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#   V E R B O S E   S T A R T U P   M E S S A G E S
#
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

verbose_message "REPO is $REPO"
verbose_message "REPO_OWNER is $REPO_OWNER"
verbose_message "REPO_SHORT_NAME is $REPO_SHORT_NAME"

verbose_message "FORKED REPO URL is $FORKED_REPO_URL"
verbose_message "FORKED_REPO is $FORKED_REPO"
verbose_message "FORK_OWNER is $FORK_OWNER"

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#   A U T H E N T I C A T E   W I T H   G I T H U B
#
#   If a github token was not provided, then create one using the
#   credentials passed via --pr-creator.
#
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# If no token was provided, then create one.
if [ -z "$ENCODED_TOKEN" ] && [ -f "$TOKEN_CACHE" ]
then
  ENCODED_TOKEN=$(cat $TOKEN_CACHE)
fi

if [ -z "$ENCODED_TOKEN" ]
then
  echo "--github-token not specified; creating a new token with account $PR_CREATOR.  This will require you to enter your password to grant this script permission to access your public repositories."
  # Authenticate with GitHub and create a token.  Note that this will prompt
  # the user for a password.
  AUTH_TOKEN_FILE="$TEMP_WORK/auth-token.txt"
  TOKEN_NAME="create-update-pr token for $(uname -n) $(date "+%Y-%m-%d")"
  curl https://api.github.com/authorizations --user "$PR_CREATOR" --data '{"scopes":["public_repo","delete_repo"],"note":"'"$TOKEN_NAME"'"}' --output "$AUTH_TOKEN_FILE"
  check "Authenticated with GitHub" "Could not authenticate with GitHub"

  cat $AUTH_TOKEN_FILE

  # Get the token data
  ENCODED_TOKEN="$(jq ".token" $AUTH_TOKEN_FILE | sed -e 's/"//g')"

  # Cache the OAuth token so that we do not need to prompt for a password
  # on successive requests.
  mkdir -p $(dirname "$TOKEN_CACHE")
  echo -n "$ENCODED_TOKEN" > "$TOKEN_CACHE"
  chmod 600 "$TOKEN_CACHE"
fi

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#   C L E A N   U P
#
#   Get rid of junk repositories from prior test runs.
#
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if $FORCE_CLEANUP
then

  PANTHEON_UPSTREAM_REPOSITORIES=/tmp/panuprepos.json
  DELETE_OUTPUT=/tmp/panupdelete.json
  list_repositories "$PR_CREATOR" "$PANTHEON_UPSTREAM_REPOSITORIES"
  #cat $PANTHEON_UPSTREAM_REPOSITORIES

  REPO_COUNT=$(jq ". | length" $PANTHEON_UPSTREAM_REPOSITORIES)
  #echo "There are $REPO_COUNT repositories"
  FIRST_REPO=$(jq ".[0].name" $PANTHEON_UPSTREAM_REPOSITORIES)
  #echo "The first repos name is $FIRST_REPO"
  FIRST_REPO_INFO=$(jq ".[0]" $PANTHEON_UPSTREAM_REPOSITORIES)
  #echo "The entire first repo record:"
  #echo $FIRST_REPO_INFO

  if [ -n "$REPO_COUNT" ]
  then
    for n in $(seq 0 $(($REPO_COUNT-1)))
    do
      repo_to_delete=$(jq ".[$n].name" $PANTHEON_UPSTREAM_REPOSITORIES | sed -e 's/"//g')
      echo "$n. $repo_to_delete"
      if [ "$repo_to_delete" != "$REPO" ] && [ "$repo_to_delete" != "$UPSTREAM" ]
      then
        case "$repo_to_delete" in
          downstream-project-*|upstream-project-*)
            delete_repository "$PR_CREATOR/$repo_to_delete" $DELETE_OUTPUT
            ;;
        esac
      fi
    done
  fi

fi

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#   C L O N E   R E P O S I T O R Y   T O   U P D A T E
#
#   Create a local repository; clone it if it does not already exist,
#   or just update the local working copy if it does.
#
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if [ ! -d "$REPO_SHORT_NAME" ] ; then
  echo "### Creating fresh clone of $REPO_SHORT_NAME"
  git clone $FORKED_REPO_URL $REPO_SHORT_NAME
  check "Checked out $FORKED_REPO_URL" "Failed to check out $FORKED_REPO_URL"
  cd $REPO_SHORT_NAME
  if [ "$REPO_URL" != "$FORKED_REPO_URL" ]
  then
    git remote add main $REPO_URL
    aborterr "Could not add remote 'main'"
  fi
  git checkout $REPO_BASE_BRANCH
  aborterr "Could not switch to $REPO_BASE_BRANCH"
else
  echo "### Updating $REPO_SHORT_NAME to HEAD of $REPO_BASE_BRANCH in github"
  cd $REPO_SHORT_NAME
  git checkout $REPO_BASE_BRANCH
  aborterr "Could not switch to $REPO_BASE_BRANCH"
  REMOTE=origin
  git remote show | grep main
  if [ $? == 0 ]
  then
    REMOTE=main
  fi
  git pull $REMOTE $REPO_BASE_BRANCH --no-edit
  aborterr "Could not pull $REPO_BASE_BRANCH from remote $REMOTE of $REPO"
  git fetch $REMOTE
  aborterr "Count not fetch from $REMOTE"
fi

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#   F I N D   U P S T R E A M   R E L E A S E S
#
#   Look for new releases in the specified upstream repository.
#   Create a new branch to hold the changes, if it has not already
#   been made.
#
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

#
# We are going to look for tags or a certain format.
#
# For Drupal 7:
#
#   7.38
#   7.37
#   7.36
#     ... etc
#
# For Drupal 8:
#
#   8.0.0-beta12
#   8.0.0-beta11
#   8.0.0-beta10
#     ... etc
#
# To find the next available tag, we first decide on what the invariant
# part of the tag should be, such as "7." for Drupal 7, or "8.0.0-beta"
# for Drupal 8.  We need to change this decision when there is a major
# change in the schema, e.g. when Drupal 8 moves to "8.0.0-rc1" or "8.1.0-alpha1";
# these newer releases will not be found or noticed until we make this
# update manually.
#
# Once we know the invariant part, we can find all tags that start with
# that string, remove that string from the beginning of each line, and then
# use `sort -n` to do a numeric sort, so that "12" is considered greater
# than "2".  This will give us the most recent available tag.
#
INVARIANT_PART="${VERSION_REQUIRED_PREFIX}${VERSION_MAJOR}.${VERSION_PATTERN}"

# List all of the remote tags that match the invariant part of the tag,
# and then sort the remaining part of the string numerically.  The greatest
# of these becomes "$availableMinor".
availableMinor="$(git ls-remote --tags "$UPSTREAM_URL" | sed -e 's|refs/tags/||' | cut -f2 | grep "^$INVARIANT_PART[a-z0-9.-]*\$" | sed -e "s|$INVARIANT_PART||" | sort -n | tail -n 1)"
aborterr "Could not check for the most recent available version"
availableVersion="$INVARIANT_PART$availableMinor"

# Find the last commit hash that is part of the specified available version.
availableHash=$(git ls-remote --tags "$UPSTREAM_URL" | grep "refs/tags/$availableVersion\$" | cut -f1)
aborterr "Could not find the hash for the most recent available version"
# Create a working branch name, e.g. "update-7.38"
UPDATE_WORKING_BRANCH="update-$availableVersion"

# Set up variables that we will use to populate the PR we create
TITLE="Update to $UPSTREAM $availableVersion"
BODY=

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#   C H E C K   I F    U P S T R E A M    M E R G E   N E E D E D
#
#   Exit if no further work is needed.
#
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NEED_UPSTTREAM_MERGE=false

# If the most recent available version in the upstream repository already
# exists in the repository we are updating, then we do not need to merge
# the available upstream release in. Same thing if we already have a tag
# of the same name.

availableVersionRegEx="${availableVersion/./\\.}"
commithash=$(git log --grep="$availableVersionRegEx" --since=1.month --pretty=format:"%h")
hastag=$(git tag -l | grep $availableVersionRegEx)

if [ -n "$commithash" ] || [ -n "$hastag" ]
then
  echo "### $FORKED_REPO already has $availableVersion"
  for c in $commithash ; do echo && git log -1 $c ; done
  exit $ERROR_ALREADY_UP_TO_DATE
else
  hasBranch=$(git branch | grep $UPDATE_WORKING_BRANCH)
  if [ -n "$hasBranch" ]
  then
    echo "### $FORKED_REPO already has a branch $UPDATE_WORKING_BRANCH"
    git checkout $UPDATE_WORKING_BRANCH
  else
    echo "### $FORKED_REPO must be updated to $availableVersion"

    # Create our working branch
    $DO git checkout -B $UPDATE_WORKING_BRANCH
    aborterr "Could not create branch '$UPDATE_WORKING_BRANCH'"
    NEED_UPSTTREAM_MERGE=true
  fi
fi


# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#   M E R G E   L A B E L E D   P R s
#
#   Look for PRs labeled 'shipit', and merge them into our working branch.
#
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

$SCRIPTS_DIR/merge-labeled-prs --label shipit


# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#   M E R G E   U P S T R E A M   R E L E A S E
#
#   Merge the upstream release into the repository we are updating.
#
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if $NEED_UPSTTREAM_MERGE
then
  # TODO:  Maybe we should make a temporary branch, and do a squash-merge here

  git checkout $UPDATE_WORKING_BRANCH
  aborterr "Could not switch to branch '$UPDATE_WORKING_BRANCH'"

  echo "### Pulling in latest release from $UPSTREAM_URL $availableVersion"
  $DO git pull $MERGE_FLAGS "$UPSTREAM_URL" "$availableVersion" --no-edit
  status=$(git status --porcelain . | grep '^UU')
  if [ -z "$status" ] ; then
    $DO git add -A .
    $DO git commit --author="$BOT_IDENTIFIER" -m "Update to $UPSTREAM_URL $availableVersion."
  fi

  # To make things easier at PR merge time, rewrite the last commit comment
  # if it is a merge commit.
  lastCommitComment="$(git log --pretty="format:%s" -1)"
  echo "$lastCommitComment" | grep -q 'Merge tag.*into'
  if [ $? == 0 ]
  then
    git commit --amend --author="$BOT_IDENTIFIER" -m "Update to Drupal $availableVersion. For more information, see $RELEASE_URL/$availableVersion."
  fi
fi

# Push working branch back up to origin
$DO git push origin "$UPDATE_WORKING_BRANCH"
check "Pushed $UPDATE_WORKING_BRANCH back up to origin of $FORKED_REPO" "Could not push $UPDATE_WORKING_BRANCH to origin of $FORKED_REPO"


# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#   C R E A T E   P U L L   R E Q U E S T
#
#   Make a pull request for the desired update.  The actual tests
#   will run against a PR in another "updates" repository; we do not
#   want a circle.yml or .travis.yml in an upstream repository, because
#   it would get in the way of downstream users who wanted their own
#   test files at the root of their repositories.
#
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Check to see if there is already a PR for this branch.

FIND_REPO_FILE="$TEMP_WORK/find-pr-in-repo.json"

find_pull_request_by_title "$REPO" "$TITLE" "$FIND_REPO_FILE"

EXISTING_PR_NUMBER="$(jq ".items[0].number" "$FIND_REPO_FILE" | sed -e 's/"//g')"

echo "### The existing PR number is assumed to be $EXISTING_PR_NUMBER"

# If the PR was not found, then create it.
if [ -z "$EXISTING_PR_NUMBER" ] || [ "$EXISTING_PR_NUMBER" == "null" ]
then
  NEW_REPO_PR_INFO_FILE="$TEMP_WORK/new-pr.json"

  BODY="This PR was created by the create-update-pr script.\n\nFor more information, see $RELEASE_URL/$availableVersion\n\nInstructions to test:\n\nCreate a new Drupal $MAJOR_VERSION site on Pantheon.\nWhen site creation is finished, visit dashboard.\nSwitch to git mode.\nClone your site locally.\nApply the files from this PR on top of your local checkout.\ngit remote add drops-$MAJOR_VERSION git@github.com:pantheon-systems/drops-$MAJOR_VERSION.git\ngit fetch drops-$MAJOR_VERSION\ngit merge drops-$MAJOR_VERSION/$UPDATE_WORKING_BRANCH\nPush your files back up to Pantheon.\nSwitch back to sftp mode.\nVisit your site. Step through the installation process. Look for any problems."

  # Create the PR on REPO
  create_pull_request "$REPO" "$TITLE" "$BODY" "$REPO_BASE_BRANCH" "$UPDATE_WORKING_BRANCH" "$NEW_REPO_PR_INFO_FILE"

  # Get the PR number for the new PR
  NEW_PR_NUMBER="$(jq ".number" "$NEW_REPO_PR_INFO_FILE" | sed -e 's/"//g')"

  echo "Please examine the pull request at: https://github.com/$REPO/pull/$NEW_PR_NUMBER"

  # Add an "automation" label to the update PR
  add_label_to_issue "$REPO" "$NEW_PR_NUMBER" "automation" "fad8c7"
else
  echo "Pull request already exists: https://github.com/$REPO/pull/$EXISTING_PR_NUMBER"
fi

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#   C L E A N   U P
#
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# rm -rf "$TEMP_WORK"

