#!/bin/bash

#
# Default option values
#
PR_CREATOR=pantheon-upstream
FORK_OWNER=
REPO=pantheon-systems/drops-7
UPSTREAM_URL=http://git.drupal.org/project/drupal.git
UPDATE_REPO=
LABEL=shipit
BOT_NAME="Pantheon Upstream"
BOT_EMAIL="developers+pantheon-upstream@getpantheon.com"
TOOL_NAME="pantheon-systems/donwstream-updater"
MAINTAINER_EMAIL="greg+downstream-updater@pantheon.io"
VERSION_MAJOR=
VERSION_PATTERN=
REPO_BASE_BRANCH=master
SCRIPTS_DIR=
TOKEN_CACHE="$HOME/.config/pantheon-upstream/github-token"
RELEASE_NODE=
FORCE_CLEANUP=false

debug=false
DO=
VERBOSE=false

#
# Return codes
#
ERROR_ALREADY_UP_TO_DATE=10

#
# Parse command line args
#
while [ $# -gt 0 ] ; do

  option="$1"
  shift

  case "$option" in
    -d|--debug)
      debug=true
      ;;

    -s|--simulate)
      DO=echo
      ;;

    -v|--verbose)
      VERBOSE=true
      ;;

    --force-cleanup)
      FORCE_CLEANUP=true
      ;;

    # --github-token TOKEN: specify the encoded token to use with the GitHub API.
    # See https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization
    --github-token)
      ENCODED_TOKEN="$1"
      shift
      ;;

    # --token-cache FILE: specify the file where the encoded token should be cached
    --token-cache)
      TOKEN_CACHE="$1"
      shift
      ;;

    # --pr-creator USER: specify the GitHub user that will create the PR.
    # This is only needed if no TOKEN is provided.  The user will have
    # to enter their password to create the token.
    --pr-creator)
      PR_CREATOR="$1"
      shift
      ;;

    # --fork-owner USER: specify the owner of the forked repository to work
    # with (in case the user cannot commit to REPO)
    --fork-owner)
      FORK_OWNER="$1"
      shift
      ;;

    # --repo REPO: specify which repository we are updating.
    # This must be on GitHub; the name should be organization/project.
    --repo)
      REPO="$1"
      shift
      ;;

    # --upstream REPO: specify the upstream repository URL we are updating against.
    # This does not need to be on GitHub; any clone URL will work.
    --upstream-url)
      UPSTREAM_URL="$1"
      shift
      ;;

    # --update REPO: specify an "update" repo that is used to test the
    # repository being updated. This must be on GitHub; the name should
    # be organization/project.
    --update)
      UPDATE_REPO="$1"
      shift
      ;;

    # --label SHIPIT: specify the GitHub label identifying PRs to automatically
    # merge with the new release being tested.
    --label)
      LABEL="$1"
      shift
      ;;

    # The username to use in commit attributions for commits made by the bot
    --bot-name)
      BOT_NAME="$1"
      shift
      ;;

    # The email to use in commit attributions for commits made by the bot
    --bot-email)
      BOT_EMAIL="$1"
      shift
      ;;

    # The tool name to be used in the User Agent used in GitHub curl requests
    --tool-name)
      TOOL_NAME="$1"
      shift
      ;;

    # The email address to be used in the User Agent used in GitHub curl requests
    --maintainer-email)
      MAINTAINER_EMAIL="$1"
      shift
      ;;

    # The major version of Drupal (or eventually WordPress?) to update
    --version-major)
      VERSION_MAJOR="$1"
      shift
      ;;

    # The "version pattern" is the invariant part of the version that comes
    # after the major version, e.g. "0.0-beta" for Drupal 8.
    --version-pattern)
      VERSION_PATTERN="$1"
      shift
      ;;

    # --base master: the branch to start from
    --base)
      REPO_BASE_BRANCH="$1"
      shift
      ;;

    # --scripts-dir: the location to find our scripts
    --scripts-dir)
      SCRIPTS_DIR="$1"
      shift
      ;;

    -*)
      echo "Unknown option $option"
      exit 1;
      ;;

    *)
      echo "Parameters are not used; '$option' is invalid."
      exit 1;
      ;;
  esac
done

# Set the scripts dir if it was not explicitly given to us
if [ -z "$SCRIPTS_DIR" ]
then
  SELF_DIRNAME="`dirname -- "$0"`"
  SCRIPTS_DIR="`cd -P -- "$SELF_DIRNAME/../scripts" && pwd -P`"
fi

# Given REPO in the form "pantheon-systems/drops-7", set:
#   REPO_URL: "git@github.com:pantheon-systems/drops-7"
#   REPO_OWNER: "pantheon-systems"
#   REPO_SHORT_NAME: "drops-7"
REPO_URL=git@github.com:${REPO}.git
REPO_OWNER=$(echo $REPO | sed -e 's#/[^/]*##')
REPO_SHORT_NAME=$(echo $REPO | sed -e 's#[^/]*/##')

# Given UPSTREAM_URL in the form "git@github.com:pressflow/7.git"
# or http://git.drupal.org/project/drupal.git, set:
#   UPSTREAM: pressflow/7
#   UPSTREAM_OWNER: pressflow
#   UPSTREAM_SHORT_NAME: 7
UPSTREAM=$(echo "$UPSTREAM_URL" | sed -e 's#git.drupal.org/project#git.drupal.org/drupal#' -e 's#\([^/]*/[^/]*\).git$#%%%\1#' -e 's/.*%%%//')
UPSTREAM_OWNER=$(echo $UPSTREAM | sed -e 's#/[^/]*##')
UPSTREAM_SHORT_NAME=$(echo $UPSTREAM | sed -e 's#[^/]*/##')

# If the user did not specify the url for the "updates"
# URL, then replace 'drops' with 'updates', and use that.
# TODO: Need to add a pattern for WordPress, once we support that.
if [ -z "$UPDATE_REPO" ]
then
  # TODO:
  #   UPDATE_REPO="${REPO/drops/updates}"
  # For now, only do this for drops-7.
  UPDATE_REPO="${REPO/drops-7/updates-7}"
  # If none of the patterns match, then the update repo URL will
  # be unchanged, and that would not be right.  Clear it, so the
  # updates step is skipped.
  if [ "$REPO" == "$UPDATE_REPO" ]
  then
    UPDATE_REPO=
  fi
fi

# If UPDATE_REPO is set, then also set related variables
if [ -n "$UPDATE_REPO" ]
then
  UPDATE_REPO_URL=git@github.com:${UPDATE_REPO}.git
  UPDATE_REPO_OWNER=$(echo $UPDATE_REPO | sed -e 's#/[^/]*##')
  UPDATE_REPO_SHORT_NAME=$(echo $UPDATE_REPO | sed -e 's#[^/]*/##')
fi

# If no fork owner was specified, then we will work directly
# from the main repository
if [ -z "$FORK_OWNER" ]
then
  FORK_OWNER="$REPO_OWNER"
fi

# The forked repo to clone.  This might be the same as REPO
FORKED_REPO_URL=git@github.com:${FORK_OWNER}/${REPO_SHORT_NAME}.git
FORKED_REPO=${FORK_OWNER}/${REPO_SHORT_NAME}

# Make an identifier from the bot name and email
BOT_IDENTIFIER="$BOT_NAME <$BOT_EMAIL>"

# Make a User-Agent string from the tool name and maintainer email address
UA="pantheon-systems/updater <greg+updater@pantheon.io>"

# If the user did not specify the --version-major,
# then take the last character from the $REPO
if [ -z "$VERSION_MAJOR" ]
then
  VERSION_MAJOR="${REPO:$((${#REPO}-1))}"
fi

# Set a default version pattern for Drupal 8.
# This will need to be updated once d8 advances to
# a later phase (e.g. rc1).
if [ -z "$VERSION_PATTERN" ] && [ "$VERSION_MAJOR" == "8" ]
then
  VERSION_PATTERN="0.0-beta"
fi

# Set up a tmp directory to work in
TEMP_WORK=$(mktemp -d /tmp/update-script.XXX)

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#   B A S H   F U N C T I O N S
#
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

source "$SCRIPTS_DIR/utils.bash"
source "$SCRIPTS_DIR/git.bash"
source "$SCRIPTS_DIR/github.bash"

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#   V E R B O S E   S T A R T U P   M E S S A G E S
#
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

verbose_message "REPO is $REPO"
verbose_message "REPO_OWNER is $REPO_OWNER"
verbose_message "REPO_SHORT_NAME is $REPO_SHORT_NAME"

verbose_message "UPSTREAM is $UPSTREAM"
verbose_message "UPSTREAM_OWNER is $UPSTREAM_OWNER"
verbose_message "UPSTREAM_SHORT_NAME is $UPSTREAM_SHORT_NAME"

verbose_message "FORKED REPO URL is $FORKED_REPO_URL"
verbose_message "FORKED_REPO is $FORKED_REPO"
verbose_message "FORK_OWNER is $FORK_OWNER"

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#   A U T H E N T I C A T E   W I T H   G I T H U B
#
#   If a github token was not provided, then create one using the
#   credentials passed via --pr-creator.
#
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# If no token was provided, then create one.
if [ -z "$ENCODED_TOKEN" ] && [ -f "$TOKEN_CACHE" ]
then
  ENCODED_TOKEN=$(cat $TOKEN_CACHE)
fi

if [ -z "$ENCODED_TOKEN" ]
then
  echo "--github-token not specified; creating a new token with account $PR_CREATOR.  This will require you to enter your password to grant this script permission to access your public repositories."
  # Authenticate with GitHub and create a token.  Note that this will prompt
  # the user for a password.
  AUTH_TOKEN_FILE="$TEMP_WORK/auth-token.txt"
  curl https://api.github.com/authorizations --user "$PR_CREATOR" --data '{"scopes":["public_repo","delete_repo"],"note":"Token used to create a PR in the create-update-pr script."}' --output "$AUTH_TOKEN_FILE"
  check "Authenticated with GitHub" "Could not authenticate with GitHub"

  cat $AUTH_TOKEN_FILE

  # Get the token data
  ENCODED_TOKEN="$(jq ".token" $AUTH_TOKEN_FILE | sed -e 's/"//g')"

  # Cache the OAuth token so that we do not need to prompt for a password
  # on successive requests.
  mkdir -p $(dirname "$TOKEN_CACHE")
  echo -n "$ENCODED_TOKEN" > "$TOKEN_CACHE"
  chmod 600 "$TOKEN_CACHE"
fi

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#   C L O N E   R E P O S I T O R Y   T O   U P D A T E
#
#   Create a local repository; clone it if it does not already exist,
#   or just update the local working copy if it does.
#
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if [ ! -d "$REPO_SHORT_NAME" ] ; then
  echo "### Creating fresh clone of $REPO_SHORT_NAME"
  git clone $FORKED_REPO_URL $REPO_SHORT_NAME
  check "Checked out $FORKED_REPO_URL" "Failed to check out $FORKED_REPO_URL"
  cd $REPO_SHORT_NAME
  if [ "$REPO_URL" != "$FORKED_REPO_URL" ]
  then
    git remote add main $REPO_URL
    aborterr "Could not add remote 'main'"
  fi
  git checkout $REPO_BASE_BRANCH
  aborterr "Could not switch to $REPO_BASE_BRANCH"
else
  echo "### Updating $REPO_SHORT_NAME to HEAD of $REPO_BASE_BRANCH in github"
  cd $REPO_SHORT_NAME
  git checkout $REPO_BASE_BRANCH
  aborterr "Could not switch to $REPO_BASE_BRANCH"
  REMOTE=origin
  git remote show | grep main
  if [ $? == 0 ]
  then
    REMOTE=main
  fi
  git pull $REMOTE $REPO_BASE_BRANCH
  aborterr "Could not pull $REPO_BASE_BRANCH from remote $REMOTE of $REPO"
fi


# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#   A U T O - M E R G E   P U L L   R E Q U E S T S
#
#   Find pull requests that are labeled (e.g. "shipit") for automatic
#   inclusion in the next release.
#
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

PR_LIST_FILE="$TEMP_WORK/pulls.json"

#
# Search for PRs that are labeled for inclusion in this release.
# The label to search for should be in $LABEL.
#
if [ -n "$LABEL" ]
then
  # Search for PRs that are labeled with "$LABEL" (e.g. "shipit")
  find_pull_request_by_label "$REPO" "$LABEL" "$PR_LIST_FILE"

  # Skip the PR merge if the GitHub API fails us for some reason
  if [ -s "$PR_LIST_FILE" ]
  then
    # Find out how many results there are by counting '.items'
    PR_COUNT=$(jq ".items | length" $PR_LIST_FILE)

    # Get info for each PR
    NEED_PR_HEADER_IN_BODY=true
    if [ -n "$PR_COUNT" ]
    then
      for PR in $(seq 0 $((PR_COUNT-1)))
      do
        # Get the URL for the Nth PR
        PR_URL="$(jq ".items[$PR].pull_request.url" $PR_LIST_FILE | sed -e 's/"//g')"
        # Get the ID for the Nth PR
        PR_NUMBER="$(jq ".items[$PR].number" $PR_LIST_FILE)"

        # Download info about this one PR
        PR_INFO_FILE="$TEMP_WORK/pull-$PR_NUMBER.json"
        curl --user-agent "$UA" "$PR_URL" --output "$PR_INFO_FILE" &> /dev/null

        # If we cannot get any info on this PR, then we'll silently skip it.
        if [ -s "$PR_INFO_FILE" ]
        then

          # Get the name of the repo and branch the PR was created from.
          PR_BRANCH="$(jq ".head.ref" $PR_INFO_FILE | sed -e 's/"//g')"
          PR_REPO="$(jq ".head.repo.clone_url" $PR_INFO_FILE | sed -e 's/"//g')"
          PR_REPO_OWNER="$(jq ".head.repo.owner.login" $PR_INFO_FILE | sed -e 's/"//g')"

          # Get the name of the branch the PR was split off from
          PR_BASE_BRANCH="$(jq ".base.ref" $PR_INFO_FILE | sed -e 's/"//g')"

          # TODO: The PR base branch must be the same as the update
          # base branch.  Otherwise, we should skip this PR and somehow
          # notify that it was not automatically included
          # (write a comment into the PR?)

          PR_WORKING_BRANCH="${PR_REPO_OWNER}-${PR_BRANCH}"

          # Fetch some values to place in the commit comment.
          PR_GITHUB_URL="$(jq ".html_url" $PR_INFO_FILE | sed -e 's/"//g')"
          PR_TITLE="$(jq ".title" $PR_INFO_FILE | sed -e 's/"//g')"

          COMMIT_COMMENT_FILE="$TEMP_WORK/commit-comment-$PR_NUMBER.txt"

          cat << __EOF__ > "$COMMIT_COMMENT_FILE"
#$PR_NUMBER: $PR_TITLE [$LABEL]

Including pull request $PR_GITHUB_URL in branch $UPDATE_WORKING_BRANCH.
__EOF__

          # Check to see if there is already a commit on this branch that
          # contains "#$PR_NUMBER: ", and skip the merge if found.
          git checkout "$UPDATE_WORKING_BRANCH"
          commithash=$(git log --grep="#$PR_NUMBER:" --pretty=format:"%h")

          if [ -n "$commithash" ]
          then
            echo "Already merged #$PR_NUMBER: $PR_TITLE [$LABEL]"
          else

            echo

            $DO git checkout -b $PR_WORKING_BRANCH $REPO_BASE_BRANCH
            $DO git pull $PR_REPO $PR_BRANCH

            $DO git checkout "$UPDATE_WORKING_BRANCH"
            $DO git merge --squash "$PR_WORKING_BRANCH"
            $DO git commit --file="$COMMIT_COMMENT_FILE" --author="$BOT_IDENTIFIER"

            cat $COMMIT_COMMENT_FILE

            # TODO: After the $UPDATE_WORKING_BRANCH is merged, close all of these
            # pull requests, ideally with a comment indicating what happened.

          fi

          # Keep track of each PR that has been merged into this branch
          # in a comment in the BODY of the PR we will create below.
          if $NEED_PR_HEADER_IN_BODY
          then
            BODY="$BODY\\n\\nPull requests tagged [$LABEL] merged with this release:\\n"
            UPDATE_PR_BODY="$UPDATE_PR_BODY\\n\\nPull requests tagged [$LABEL] merged with this release:\\n"

            NEED_PR_HEADER_IN_BODY=false
          fi
          BODY="$BODY\\n#$PR_NUMBER: $PR_TITLE"
          UPDATE_PR_BODY="$UPDATE_PR_BODY\\n$REPO#$PR_NUMBER: $PR_TITLE"
        fi
      done
    fi
  fi
fi


# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#   C L E A N   U P
#
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# rm -rf "$TEMP_WORK"

