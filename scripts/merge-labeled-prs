#!/bin/bash

#
# Default option values
#
PR_CREATOR=pantheon-upstream
LABEL=shipit
BOT_NAME="Pantheon Upstream"
BOT_EMAIL="developers+pantheon-upstream@getpantheon.com"
TOOL_NAME="pantheon-systems/donwstream-updater"
MAINTAINER_EMAIL="greg+downstream-updater@pantheon.io"
VERSION_MAJOR=
VERSION_PATTERN=
REPO_BASE_BRANCH=master
SCRIPTS_DIR=
TOKEN_CACHE="$HOME/.config/pantheon-upstream/github-token"
SUMMARY_FILE=
REPO_URL=

debug=false
DO=
VERBOSE=false
SQUASH=false

#
# Parse command line args
#
while [ $# -gt 0 ] ; do

  option="$1"
  shift

  case "$option" in
    -d|--debug)
      debug=true
      ;;

    -s|--simulate)
      DO=echo
      ;;

    -v|--verbose)
      VERBOSE=true
      ;;

    --squash)
      SQUASH=true
      ;;

    # --token-cache FILE: specify the file where the encoded token should be cached
    --token-cache)
      TOKEN_CACHE="$1"
      shift
      ;;

    # --pr-creator USER: specify the GitHub user that will create the PR.
    # This is only needed if no TOKEN is provided.  The user will have
    # to enter their password to create the token.
    --pr-creator)
      PR_CREATOR="$1"
      shift
      ;;

    # --label SHIPIT: specify the GitHub label identifying PRs to automatically
    # merge with the new release being tested.
    --label)
      LABEL="$1"
      shift
      ;;

    # The username to use in commit attributions for commits made by the bot
    --bot-name)
      BOT_NAME="$1"
      shift
      ;;

    # The email to use in commit attributions for commits made by the bot
    --bot-email)
      BOT_EMAIL="$1"
      shift
      ;;

    # The tool name to be used in the User Agent used in GitHub curl requests
    --tool-name)
      TOOL_NAME="$1"
      shift
      ;;

    # The email address to be used in the User Agent used in GitHub curl requests
    --maintainer-email)
      MAINTAINER_EMAIL="$1"
      shift
      ;;

    # The major version of Drupal (or eventually WordPress?) to update
    --version-major)
      VERSION_MAJOR="$1"
      shift
      ;;

    # The "version pattern" is the invariant part of the version that comes
    # after the major version, e.g. "0.0-beta" for Drupal 8.
    --version-pattern)
      VERSION_PATTERN="$1"
      shift
      ;;

    # --base master: the branch to start from
    --base)
      REPO_BASE_BRANCH="$1"
      shift
      ;;

    # --scripts-dir: the location to find our scripts
    --scripts-dir)
      SCRIPTS_DIR="$1"
      shift
      ;;

    --summary)
      SUMMARY_FILE="$1"
      shift
      ;;

    # --repo-url "git@github.com:pantheon-systems/drops-7"
    --repo-url)
      REPO_URL="$1"
      shift
      ;;

    -*)
      echo "Unknown option $option"
      exit 1;
      ;;

    *)
      echo "Parameters are not used; '$option' is invalid."
      exit 1;
      ;;
  esac
done

# Set the scripts dir if it was not explicitly given to us
if [ -z "$SCRIPTS_DIR" ]
then
  SELF_DIRNAME="`dirname -- "$0"`"
  SCRIPTS_DIR="`cd -P -- "$SELF_DIRNAME/../scripts" && pwd -P`"
fi

# Given REPO in the form "pantheon-systems/drops-7", set:
#   REPO_URL: "git@github.com:pantheon-systems/drops-7"
#   REPO_OWNER: "pantheon-systems"
#   REPO_SHORT_NAME: "drops-7"
if [ -z "$REPO_URL" ]
then
  REPO_URL=$(git config --get remote.origin.url)
fi
REPO=$(echo "$REPO_URL" | sed -e 's#[^:]*:##' | sed -e 's#\.git$##')
REPO_OWNER=$(echo $REPO | sed -e 's#/[^/]*##')
REPO_SHORT_NAME=$(echo $REPO | sed -e 's#[^/]*/##')

# Make an identifier from the bot name and email
BOT_IDENTIFIER="$BOT_NAME <$BOT_EMAIL>"

# Make a User-Agent string from the tool name and maintainer email address
UA="pantheon-systems/updater <greg+updater@pantheon.io>"

# If the user did not specify the --version-major,
# then take the last character from the $REPO
if [ -z "$VERSION_MAJOR" ]
then
  VERSION_MAJOR="${REPO:$((${#REPO}-1))}"
fi

# Set a default version pattern for Drupal 8.
# This will need to be updated once d8 advances to
# a later phase (e.g. rc1).
if [ -z "$VERSION_PATTERN" ] && [ "$VERSION_MAJOR" == "8" ]
then
  VERSION_PATTERN="0.0-beta"
fi

# Set up a tmp directory to work in
TEMP_WORK=$(mktemp -d /tmp/update-script.XXX)

# Get the working branch. Report an error if we are not on a working branch.
UPDATE_WORKING_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
case "$UPDATE_WORKING_BRANCH" in
  master|*.x)
    echo "Do not run this script on the branch '$UPDATE_WORKING_BRANCH'; make a working branch first."
    exit 1
    ;;
esac

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#   B A S H   F U N C T I O N S
#
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

source "$SCRIPTS_DIR/utils.bash"
source "$SCRIPTS_DIR/git.bash"
source "$SCRIPTS_DIR/github.bash"

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#   V E R B O S E   S T A R T U P   M E S S A G E S
#
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

verbose_message "REPO_URL is $REPO_URL"
verbose_message "REPO is $REPO"
verbose_message "REPO_OWNER is $REPO_OWNER"
verbose_message "REPO_SHORT_NAME is $REPO_SHORT_NAME"

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#   A U T O - M E R G E   P U L L   R E Q U E S T S
#
#   Find pull requests that are labeled (e.g. "shipit") for automatic
#   inclusion in the next release.
#
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

PR_LIST_FILE="$TEMP_WORK/pulls.json"

echo "Label is $LABEL"

#
# Search for PRs that are labeled for inclusion in this release.
# The label to search for should be in $LABEL.
#
if [ -n "$LABEL" ]
then
  # Search for PRs that are labeled with "$LABEL" (e.g. "shipit")
  find_pull_request_by_label "$REPO" "$LABEL" "$PR_LIST_FILE"

  if $VERBOSE
  then
    cat $PR_LIST_FILE
    echo
  fi

  # Skip the PR merge if the GitHub API fails us for some reason
  if [ -s "$PR_LIST_FILE" ]
  then
    # Find out how many results there are by counting '.items'
    PR_COUNT=$(jq ".items | length" $PR_LIST_FILE)

    echo "found $PR_COUNT PRs"

    # Get info for each PR
    NEED_PR_HEADER_IN_BODY=true
    if [ -n "$PR_COUNT" ]
    then
      for PR in $(seq 0 $((PR_COUNT-1)))
      do
        # Get the URL for the Nth PR
        PR_URL="$(jq ".items[$PR].pull_request.url" $PR_LIST_FILE | sed -e 's/"//g')"
        # Get the ID for the Nth PR
        PR_NUMBER="$(jq ".items[$PR].number" $PR_LIST_FILE)"

        # Download info about this one PR
        PR_INFO_FILE="$TEMP_WORK/pull-$PR_NUMBER.json"
        curl --user-agent "$UA" "$PR_URL" --output "$PR_INFO_FILE" &> /dev/null

        # If we cannot get any info on this PR, then we'll silently skip it.
        if [ -s "$PR_INFO_FILE" ]
        then

          # Get the name of the repo and branch the PR was created from.
          PR_BRANCH="$(jq ".head.ref" $PR_INFO_FILE | sed -e 's/"//g')"
          PR_REPO="$(jq ".head.repo.clone_url" $PR_INFO_FILE | sed -e 's/"//g')"
          PR_REPO_OWNER="$(jq ".head.repo.owner.login" $PR_INFO_FILE | sed -e 's/"//g')"

          # Get the name of the branch the PR was split off from
          PR_BASE_BRANCH="$(jq ".base.ref" $PR_INFO_FILE | sed -e 's/"//g')"

          # TODO: The PR base branch must be the same as the update
          # base branch.  Otherwise, we should skip this PR and somehow
          # notify that it was not automatically included
          # (write a comment into the PR?)

          PR_WORKING_BRANCH="${PR_REPO_OWNER}-${PR_BRANCH}"

          # Fetch some values to place in the commit comment.
          PR_GITHUB_URL="$(jq ".html_url" $PR_INFO_FILE | sed -e 's/"//g')"
          PR_TITLE="$(jq ".title" $PR_INFO_FILE | sed -e 's/"//g')"

          COMMIT_COMMENT_FILE="$TEMP_WORK/commit-comment-$PR_NUMBER.txt"

          cat << __EOF__ > "$COMMIT_COMMENT_FILE"
#$PR_NUMBER: $PR_TITLE [$LABEL]

Including pull request $PR_GITHUB_URL in branch $UPDATE_WORKING_BRANCH.
__EOF__

          # Check to see if there is already a commit on this branch that
          # contains "#$PR_NUMBER: ", and skip the merge if found.
          git checkout "$UPDATE_WORKING_BRANCH"
          commithash=$(git log --grep="#$PR_NUMBER:" --pretty=format:"%h")

          if [ -n "$commithash" ]
          then
            echo "Already merged #$PR_NUMBER: $PR_TITLE [$LABEL]"
          else

            echo

            $DO git checkout -b $PR_WORKING_BRANCH $REPO_BASE_BRANCH
            $DO git pull $PR_REPO $PR_BRANCH

            $DO git checkout "$UPDATE_WORKING_BRANCH"
            if $SQUASH
            then
              $DO git merge --squash "$PR_WORKING_BRANCH"
              $DO git commit --file="$COMMIT_COMMENT_FILE" --author="$BOT_IDENTIFIER"

              cat $COMMIT_COMMENT_FILE
            else
              $DO git merge "$PR_WORKING_BRANCH"
            fi

            # TODO: After the $UPDATE_WORKING_BRANCH is merged, close all of these
            # pull requests, ideally with a comment indicating what happened.
            # GitHub should do this for us. At least if we do not squash it should.

          fi

          # Keep track of each PR that has been merged into this branch
          if $NEED_PR_HEADER_IN_BODY
          then
            BODY="$BODY\\n\\nPull requests tagged [$LABEL] merged with this release:\\n"
            UPDATE_PR_BODY="$UPDATE_PR_BODY\\n\\nPull requests tagged [$LABEL] merged with this release:\\n"

            NEED_PR_HEADER_IN_BODY=false
          fi
          BODY="$BODY\\n#$PR_NUMBER: $PR_TITLE"
          UPDATE_PR_BODY="$UPDATE_PR_BODY\\n$REPO#$PR_NUMBER: $PR_TITLE"
        fi
      done
    fi
  fi
fi

# If the caller wants the summary, write it to the
# provided file path.
if [ -n "$SUMMARY_FILE" ]
then
  cat <<< $UPDATE_PR_BODY > $SUMMARY_FILE
fi

if $VERBOSE
then
  echo "Summary:"
  cat <<< $UPDATE_PR_BODY
fi

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#   C L E A N   U P
#
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# rm -rf "$TEMP_WORK"

