#!/bin/bash
#
# Usage:
#
# $ cd dir_with_updated_d8
# $ d8-release
#
# This script assumes that ORIGIN points to pantheon-systems/drops-8
# and the current branch is the master branch, with the newest version merged.
#
SELF_DIRNAME="`dirname -- "$0"`"

set -ex

# Get the current branch
branch=$(git rev-parse --abbrev-ref HEAD)

# If we're on the default branch, switch to master and pull.
if [ "$branch" == "default" ]
then
  git checkout master
  git pull origin master
  branch=master
fi

# Require the master branch
if [ "$branch" != "master" ]
then
  echo "Current branch must be master. Merge the update PR in GitHub before running this script."
  exit 1
fi

# Check the version of the current branch
version=$(drush status 'Drupal version' | sed -e 's/[^:]*: *//')

# Only release stable versions
set +e
non_stable=$(echo $version | grep -v '^v*[0-9.]*$')
set -e
if [ -n "$non_stable" ] ; then
  echo "Current version is $version; this script can only be used to releasese stable versions"
  echo 1
fi

# Check to see if there's already a tag for the current version
set +e
version_tag=$(git tag -l | grep "^$version\$")
set -e
if [ -n "$version_tag" ] ; then
  echo "Current release already tagged; nothing to do."
  exit 0
fi

# Delete all of the non-semver tags from the local repository to
# avoid conflicts when pushing
set +e
non_semver=$(git tag -l | grep -v '^v*[0-9.]*$')
set -e
for tag in $non_semver ; do
  git tag -d $tag
done

commit_message="$(git log --pretty=format:%s -1)"

# Tag the new release
git tag $version
git push origin $version

# Add a note to the documentation changelog
$SELF_DIRNAME/update_changelog --fix --name=Drupal --project=pantheon-systems/drops-8 --version="$version" --message="$commit_message"

# Look up the release URL from the commit comment
release_url="$(echo "$commit_message" | sed -e 's#.*\(https://.*\)#\1#')"

# Post a security notification to statuspage if this is a security release
$SELF_DIRNAME/statuspage --release-url="$release_url"

# Update our scaffolding files project too (if it was not pre-tagged)
$SELF_DIRNAME/create-drops-8-scaffolding

# TODO: Make a pantheon-systems/drupal-core that is just a clone of
# drupal/core, but tagged after drops-8 is updated.

# Wait for Packagist to be updated with the new version created by the
# script above. If we do not wait, our call to composer-lock-update
# will not see our latest update.
$SELF_DIRNAME/wait-for-packagist pantheon-systems/drops-8-scaffolding $version

# TODO: Make a pantheon-systems/drupal-core that is just a clone of
# drupal/core, but tagged after drops-8 is updated.
# $SELF_DIRNAME/wait-for-packagist pantheon-systems/drupal-core $version

# Make a PR to update the example-drops-8-composer composer.lock file.
clu pantheon-systems/example-drops-8-composer

# TODO: Maybe post a list of links somewhere, maybe on the original PR?
# List of links should be similar to:
#
# drops-8: https://github.com/pantheon-systems/drops-8/tree/8.5.6
# example-drops-8-composer: https://github.com/pantheon-systems/example-drops-8-composer/pull/162
# drops-8-scaffolding: https://github.com/pantheon-systems/drops-8-scaffolding/tree/8.5.6
# changelog: https://github.com/pantheon-systems/documentation/issues/3850#issuecomment-409735689
# status page: https://status.pantheon.io/incidents/r6crg6fzz2nd
#
# Ideally this would go on the JIRA card, if we have an API for modifying that.


# Back to default
git checkout default
