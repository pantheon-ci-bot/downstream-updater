#!/usr/bin/env php
<?php

$options = getopt(
  "dv",
  [
    'name:',
    'project:',
    'version:',
    'message:',
    'fix',
  ]
) + [
  'message' => '',
  'fix' => false,
];

$project_name = $options['name'];
$project = $options['project'];
$version = $options['version'];
$message = $options['message'];

if ($options['fix']) {
  $message = preg_replace('#Update to ([^0-9]*[0-9]\.[0-9]\.[0-9])\.#', 'Pantheon has released \1 on the platform.', $message);
}

$HOME = getenv('HOME');
$token_cache="$HOME/.config/pantheon-upstream/github-token";
if (is_file($token_cache)) {
  $token = file_get_contents($token_cache);
}
if (empty($token)) {
  $token = getenv('GITHUB_TOKEN');
}
$documentation_project = 'pantheon-systems/documentation';

function find_changelog_issue($project, $month_index)
{
  $result = find_by_regex("https://api.github.com/repos/$project/issues?state=open", changelog_regex_next($month_index));
  if ($result) {
    return $result;
  }
  $result = find_by_regex("https://api.github.com/repos/$project/issues?state=open", changelog_regex_both($month_index));
  if ($result) {
    return $result;
  }
  return find_by_regex("https://api.github.com/repos/$project/issues?state=open", changelog_regex_this($month_index));
}

function find_by_regex($search, $regex)
{
  $result = false;
  $page = 1;
  while ($result === false) {
    $result = find_paged_by_regex($search, $regex, $page);
    $page = $page + 1;
  }
  return $result;
}

// Returns NULL if there is no data on this page, or false if nothing is
// found. Otherwise, returns the record (array) to the found issue.
function find_paged_by_regex($search, $regex, $page = 1)
{
  // Get all of the open issues in pantheon-systems/documentation
  exec("curl '$search&page=$page'", $issue_json, $status);
  $issues = json_decode(implode("\n", $issue_json), true);
  $result = NULL;

  foreach ($issues as $issue) {
    // Search for a title along the lines of
    // 'November/December changelog'
    if (preg_match($regex, $issue['title'])) {
      return $issue;
    }
    $result = false;
  }
  return $result;
}

function changelog_regex_months($month_index)
{
  $months = [
    'dec', 'jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec', 'jan',
  ];

  $start_month = $months[$month_index];
  $next_month = $months[$month_index+1];

  return [$start_month, $next_month];
}

function changelog_regex_both($month_index)
{
  list($start_month, $next_month) = changelog_regex_months($month_index);
  return "#^${start_month}[a-z]* */${next_month}[a-z]* changelog#i";
}

function changelog_regex_next($month_index)
{
  list($start_month, $next_month) = changelog_regex_months($month_index);
  return "#^${next_month}[a-z]* changelog#i";
}

function changelog_regex_this($month_index)
{
  list($start_month, $next_month) = changelog_regex_months($month_index);
  return "#^${start_month}[a-z]* changelog#i";
}

function update_version_regex($version)
{
  $versexpr = str_replace('.', '\\.', $version);
  return "#^Update.*${versexpr}\$#i";
}

function add_changelog_comment($project, $number, $comment, $token)
{
  print "Adding comment to $project issue #$number:\n$comment\n";
  print("curl -d '{ \"body\": \"$comment\" }' -X POST https://api.github.com/repos/$project/issues/$number/comments?access_token=$token");
  exec("curl -d '{ \"body\": \"$comment\" }' -X POST https://api.github.com/repos/$project/issues/$number/comments?access_token=$token", $output, $status);
}

$month_index = (int)date('m');
$changelog_issue = find_changelog_issue($documentation_project, $month_index);
if (empty($changelog_issue)) {
  $changelog_issue = find_changelog_issue($documentation_project, $month_index - 1);
}
if (empty($changelog_issue)) {
  print "Could not find changelog issue\n";
  exit(1);
}

$changelog_url = $changelog_issue['url'];
$changelog_issue_number = $changelog_issue['number'];

print "Changelog URL is $changelog_url\n";

$commit_message = "### $project_name $version";

if (!empty($pr)) {
  $pr_url = $pr['html_url'];
  $commit_message .= ": $pr_url";
  print "Commit URL is $pr_url\n";
}

// Add $message on after $commit_message
$commit_message .= '\\n' . $message;

add_changelog_comment($documentation_project, $changelog_issue_number, $commit_message, $token);
