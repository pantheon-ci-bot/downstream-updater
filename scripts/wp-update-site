#!/bin/bash

###
# Set some defaults if PANTHEON_SITE and PANTHEON_BRANCH are not set
###
test -n "$PANTHEON_SITE" || PANTHEON_SITE=wp-update
test -n "$PANTHEON_BRANCH" || PANTHEON_BRANCH=update
test -n "$PANTHEON_UPSTREAM" || PANTHEON_UPSTREAM=git@github.com:pantheon-systems/WordPress.git

# Set the scripts dir if it was not explicitly given to us
if [ -z "$SCRIPTS_DIR" ]
then
  SELF_DIRNAME="`dirname -- "$0"`"
  SCRIPTS_DIR="`cd -P -- "$SELF_DIRNAME/../scripts" && pwd -P`"
fi

# By default, update to whatever `wp core update` wants to update to
UPDATE_TO_VERSION=

#
# Parse command line args
#
while [ $# -gt 0 ] ; do
  option="$1"
  shift

  case "$option" in
    --nightly)
      UPDATE_TO_VERSION='--version=nightly'
      ;;
  esac
done

###
# Authenticate with Terminus to perform site management operations.
#
# You must either log in via terminus auth login prior to running
# this script, or you must have logged in with a machine token at
# some time in the past, or you must set the $TERMINUS_TOKEN environment
# variable must be set with a valid machine token (e.g. if running on a
# CI server).
###
MY_INFO="$(terminus whoami)"

if [ $? != 0 ]
then
  USE_TOKEN=
  if [ -n "$TERMINUS_TOKEN" ]
  then
    USE_TOKEN="--machine-token=$TERMINUS_TOKEN"
  fi
  terminus auth:login $USE_TOKEN
fi

# Check to see if our multidev environment exists before we set -e
PANTHEON_GIT_URL=$(terminus connection:info --field=git_url $PANTHEON_SITE.$PANTHEON_BRANCH)

#DO=echo

set -ex

#
# Start out by cloning the site repository
#
PUUID=$(terminus site:info $PANTHEON_SITE --field=id 2>/dev/null)
if [ -z "$PUUID" ]
then
    echo "Could not get UUID for $PANTHEON_SITE"
    exit 1
fi
REPO="ssh://codeserver.dev.$PUUID@codeserver.dev.$PUUID.drush.in:2222/~/repository.git"

# If our cwd is already in a copy of our work site, then we're good
if [ "$(basename $(pwd))" != "$PANTHEON_SITE" ] ; then
  # Don't check out if we're inside some other project
  if [ -d .git ] ; then
    echo 'Change your cwd to a work directory first; do not run from an existing project' >&2
    exit 1
  fi
  # If our project isn't already checked out here, then make a clone
  if [ ! -d "$PANTHEON_SITE" ] ; then
      git clone "$REPO" "$PANTHEON_SITE"
      cd "$PANTHEON_SITE"
      git remote rename origin pantheon
      git remote add origin $PANTHEON_UPSTREAM
  else
      cd "$PANTHEON_SITE"
      git checkout master
  fi
fi

###
# Apply old upstream updates to the dev branch of the update site using git
###
$DO git pull origin master --no-edit

###
# Switch to an 'update' branch
###
git checkout -B update

###
# Merge in any pull requests labeled 'shipit'
###
$SCRIPTS_DIR/merge-labeled-prs --squash --label shipit

###
# Push the result back up to the Pantheon site. Push from our 'update'
# branch to the Pantheon site's 'master' branch.
###
$DO git push pantheon update:master --force

###
# Use wp-cli to do any necessary database updates on the dev environment
###
$DP terminus wp $PANTHEON_SITE.dev -- core update-db 2>/dev/null

# Let's delete the old update branch if it exists, just to clean stuff up
if [ -n "$PANTHEON_GIT_URL" ]
then
  echo $DO terminus multidev:delete $PANTHEON_SITE.$PANTHEON_BRANCH --delete-branch --yes
fi

###
# Create the 'update' environment for our use.
###
$DO terminus --yes env:info $PANTHEON_SITE.$PANTHEON_BRANCH 2>/dev/null || $DO terminus --yes multidev:create $PANTHEON_SITE.dev $PANTHEON_BRANCH
PANTHEON_GIT_URL=$(terminus connection:info --field=git_url $PANTHEON_SITE.$PANTHEON_BRANCH)

###
# Set STFP mode in the new environment if necessary
###
$DO terminus connection:set $PANTHEON_SITE.$PANTHEON_BRANCH sftp

###
# Use wp-cli to check the version of WordPress currently installed
###
CURRENT_VERSION=$(terminus wp $PANTHEON_SITE.$PANTHEON_BRANCH -- core version 2>/dev/null)

# Just for prudence
sleep 10

###
# Run terminus wp to update the site
###
$DO terminus wp $PANTHEON_SITE.$PANTHEON_BRANCH -- core update $UPDATE_TO_VERSION

###
# Use wp-cli to confirm the version of WordPress changed
###
UPDATED_VERSION=$(terminus wp $PANTHEON_SITE.$PANTHEON_BRANCH -- core version 2>/dev/null)

if [ "x$CURRENT_VERSION" == "x$UPDATED_VERSION" ]
then
  echo "WordPress version is $CURRENT_VERSION; no further updates available."
  exit 0
else
  echo "WordPress has been updated from $CURRENT_VERSION to $UPDATED_VERSION"
fi

###
# Verify the checksums on the updated site
###
$DO terminus wp $PANTHEON_SITE.$PANTHEON_BRANCH -- core verify-checksums

###
# Use wp-cli to do any necessary database updates
###
$DP terminus wp $PANTHEON_SITE.$PANTHEON_BRANCH -- core update-db 2>/dev/null

###
# WORKAROUND: We need to hit the dashboard to refresh the files available to commit
# https://github.com/pantheon-systems/terminus/issues/1115
###
terminus dashboard $PANTHEON_SITE.$PANTHEON_BRANCH

# More prudence
sleep 10

# TODO: Code changes do not show up in the multidev environment.
# https://github.com/pantheon-systems/terminus/issues/1115
DIFFS=$(terminus env:diffstat $PANTHEON_SITE.$PANTHEON_BRANCH --format=yaml | grep -v '^{ *}$')

# Stop if the process didn't work.
if [ -z "$DIFFS" ] ; then
  echo "#################### ERROR NO DIFFS. Confirm that update went okay on $PANTHEON_SITE.$PANTHEON_BRANCH ###############"
  exit 1
fi

# Find the URL to the release node
release_url=$(curl https://wordpress.org/news/ 2>/dev/null | grep "<a [^>]*>WordPress $UPDATED_VERSION " | grep -iv 'Release Candidate' | grep -iv 'Beta' | sed 's|.*\(https://wordpress.org/news/[a-zA-Z/0-9._-]*\).*|\1|g' | sort -r | head -n 1)

###
# Use terminus to commit the necessary files in the environment.
###
$DO terminus env:commit $PANTHEON_SITE.$PANTHEON_BRANCH --yes --message="Update to WordPress $UPDATED_VERSION. For more information, see $release_url"

###
# Create a branch for the update. We will start with the "default" branch, which
# is master + test (includes the .circleci directory).
###
git fetch pantheon
git fetch origin
git pull pantheon $PANTHEON_BRANCH -s recursive -X theirs --no-edit
current_comment=$(git log --pretty=format:"%s" -1)
git commit --amend --author="Pantheon Automation <bot@getpantheon.com>" -m "$current_comment"
update_commit=$(git rev-parse HEAD)
git checkout default
git rebase origin/master
git push --force origin default
git checkout -B update-$UPDATED_VERSION default
git cherry-pick $update_commit

###
# Merge in the test scripts (.circleci/config.yml & c.) from the 'test' branch.
# This material will be removed when the PR is merged back
###
git push origin update-$UPDATED_VERSION

###
# Pull request message
###
commit_message=/tmp/commitmsg.txt
cat <<EOT > $commit_message
Update to WordPress version $UPDATED_VERSION.

Inspect the result of the [functional tests run by Circle CI](https://circleci.com/gh/pantheon-systems/WordPress).

**OPTIONAL** -- To create your own test site:

- Create a new WordPress site on Pantheon.
- When site creation is finished, visit dashboard.
- Switch to "git" mode.
- Clone your site locally.
- Apply the files from this PR on top of your local checkout.
  - git remote add WordPress git@github.com:pantheon-systems/WordPress.git
  - git fetch WordPress
  - git merge WordPress/update-$UPDATED_VERSION
- Push your files back up to Pantheon.
- Switch back to sftp mode.
- Visit your site and step through the installation process.

EOT

###
# Create a pull request for the update
###
pr_url=$(hub pull-request -F $commit_message)
echo $pr_url

# TODO: look up CIRCLE_BUILD from the $pr_url
CIRCLE_BUILD="ci-###"
echo '# After the tests pass, to reset the password for the "pantheon" (admin) user:'
echo "terminus wp ci-wordpress-core.ci-$CIRCLE_BUILD -- user update 1 --user_pass=PASSWORD"
